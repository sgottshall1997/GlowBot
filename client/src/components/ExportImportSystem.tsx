import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { toast } from '@/hooks/use-toast';
import { Download, Upload, FileText, File, Code, Clipboard, CheckCircle2, Sparkles, Zap } from 'lucide-react';
import { apiRequest } from '@/lib/queryClient';
import { NICHES } from '@shared/constants';

interface ExportData {
  content: string;
  metadata: {
    title: string;
    niche: string;
    platform: string;
    tone: string;
    generatedAt: string;
    templateType: string;
  };
}

export default function ExportImportSystem() {
  const [activeTab, setActiveTab] = useState<string>('export');
  const [exportFormat, setExportFormat] = useState<string>('markdown');
  const [exportContent, setExportContent] = useState<string>('');
  const [exportTitle, setExportTitle] = useState<string>('');
  const [importContent, setImportContent] = useState<string>('');
  const [importedData, setImportedData] = useState<ExportData | null>(null);
  const [isExporting, setIsExporting] = useState<boolean>(false);
  const [isImporting, setIsImporting] = useState<boolean>(false);
  const [enhancedContent, setEnhancedContent] = useState<string>('');
  const [isEnhancing, setIsEnhancing] = useState<boolean>(false);
  const [exportType, setExportType] = useState<string>('single');
  const [importFormat, setImportFormat] = useState<string>('glowbot');
  const [importNiche, setImportNiche] = useState<string>('');
  const [importPlatform, setImportPlatform] = useState<string>('Instagram');
  const [importTone, setImportTone] = useState<string>('professional');
  const [copySuccess, setCopySuccess] = useState<boolean>(false);

  // Platforms list
  const platforms = [
    'Instagram', 'Facebook', 'Twitter', 'LinkedIn', 
    'TikTok', 'Pinterest', 'Blog', 'Email', 'YouTube'
  ];

  // Tone options
  const tones = [
    'professional', 'casual', 'friendly', 'authoritative', 
    'humorous', 'inspirational', 'educational', 'promotional'
  ];

  // Handle exporting content
  const handleExport = async () => {
    if (!exportContent) {
      toast({
        title: 'Missing Content',
        description: 'Please enter content to export.',
        variant: 'destructive',
      });
      return;
    }

    setIsExporting(true);
    
    try {
      let formattedContent = exportContent;
      let downloadContent = '';
      let fileName = `glowbot-export-${new Date().toISOString().split('T')[0]}`;
      let fileExtension = '';
      
      // Create metadata for GlowBot format
      const metadata = {
        title: exportTitle || 'Untitled Content',
        niche: importNiche || 'skincare',
        platform: importPlatform || 'Instagram',
        tone: importTone || 'professional',
        generatedAt: new Date().toISOString(),
        templateType: 'custom',
      };
      
      // Format content based on selected format
      switch(exportFormat) {
        case 'markdown':
          downloadContent = `# ${metadata.title}\n\n${formattedContent}\n\n---\n\n*Generated by GlowBot on ${new Date().toLocaleDateString()}*`;
          fileExtension = 'md';
          break;
          
        case 'html':
          downloadContent = `<!DOCTYPE html>
<html>
<head>
  <title>${metadata.title}</title>
  <meta charset="UTF-8">
  <style>
    body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
    h1 { color: #333; }
    .content { line-height: 1.6; }
    .footer { margin-top: 30px; font-size: 0.8em; color: #666; }
  </style>
</head>
<body>
  <h1>${metadata.title}</h1>
  <div class="content">
    ${formattedContent.replace(/\n/g, '<br>')}
  </div>
  <div class="footer">
    Generated by GlowBot on ${new Date().toLocaleDateString()}
  </div>
</body>
</html>`;
          fileExtension = 'html';
          break;
          
        case 'txt':
          downloadContent = `${metadata.title}\n\n${formattedContent}\n\n---\nGenerated by GlowBot on ${new Date().toLocaleDateString()}`;
          fileExtension = 'txt';
          break;
          
        case 'json':
          downloadContent = JSON.stringify({ content: formattedContent, metadata }, null, 2);
          fileExtension = 'json';
          break;
          
        case 'glowbot':
          downloadContent = JSON.stringify({ content: formattedContent, metadata }, null, 2);
          fileExtension = 'glowbot';
          break;
      }
      
      // Create and trigger download
      const blob = new Blob([downloadContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${fileName}.${fileExtension}`;
      document.body.appendChild(a);
      a.click();
      
      // Clean up
      setTimeout(() => {
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }, 100);
      
      toast({
        title: 'Export Successful',
        description: `Content exported as ${exportFormat.toUpperCase()}.`,
      });
    } catch (error) {
      console.error('Export failed:', error);
      toast({
        title: 'Export Failed',
        description: 'Failed to export content. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsExporting(false);
    }
  };

  // Handle importing content
  const handleImport = async () => {
    if (!importContent) {
      toast({
        title: 'Missing Content',
        description: 'Please enter or upload content to import.',
        variant: 'destructive',
      });
      return;
    }

    setIsImporting(true);
    
    try {
      // Process imported content based on format
      if (importFormat === 'glowbot' || importFormat === 'json') {
        try {
          // Try to parse as JSON
          const parsedData = JSON.parse(importContent);
          
          if (parsedData.content && parsedData.metadata) {
            setImportedData(parsedData);
            setExportContent(parsedData.content);
            setExportTitle(parsedData.metadata.title || 'Imported Content');
            setImportNiche(parsedData.metadata.niche || '');
            setImportPlatform(parsedData.metadata.platform || 'Instagram');
            setImportTone(parsedData.metadata.tone || 'professional');
            
            toast({
              title: 'Import Successful',
              description: 'GlowBot format content imported successfully.',
            });
          } else {
            throw new Error('Invalid GlowBot format');
          }
        } catch (error) {
          console.error('JSON parsing failed:', error);
          toast({
            title: 'Import Failed',
            description: 'Failed to parse content as JSON. Please check the format.',
            variant: 'destructive',
          });
        }
      } else {
        // For plain text, markdown or HTML, just use as-is
        setImportedData({
          content: importContent,
          metadata: {
            title: 'Imported Content',
            niche: importNiche || 'skincare',
            platform: importPlatform || 'Instagram',
            tone: importTone || 'professional',
            generatedAt: new Date().toISOString(),
            templateType: 'imported',
          }
        });
        setExportContent(importContent);
        setExportTitle('Imported Content');
        
        toast({
          title: 'Import Successful',
          description: `Content imported as ${importFormat.toUpperCase()}.`,
        });
      }
      
      // Switch to export tab to show the imported content
      setActiveTab('export');
    } catch (error) {
      console.error('Import failed:', error);
      toast({
        title: 'Import Failed',
        description: 'Failed to import content. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsImporting(false);
    }
  };

  // Handle file upload for importing
  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    
    // Check for file size limit (5MB)
    if (file.size > 5 * 1024 * 1024) {
      toast({
        title: 'File Too Large',
        description: 'File size exceeds 5MB limit.',
        variant: 'destructive',
      });
      return;
    }
    
    const reader = new FileReader();
    reader.onload = (e) => {
      const content = e.target?.result as string;
      setImportContent(content);
      
      // Try to auto-detect format
      const fileName = file.name.toLowerCase();
      if (fileName.endsWith('.md')) {
        setImportFormat('markdown');
      } else if (fileName.endsWith('.html')) {
        setImportFormat('html');
      } else if (fileName.endsWith('.json')) {
        setImportFormat('json');
      } else if (fileName.endsWith('.glowbot')) {
        setImportFormat('glowbot');
      } else {
        setImportFormat('txt');
      }
    };
    
    reader.readAsText(file);
  };

  // Enhance imported content with AI
  const handleEnhanceContent = async () => {
    if (!exportContent) {
      toast({
        title: 'Missing Content',
        description: 'Please import or enter content first.',
        variant: 'destructive',
      });
      return;
    }
    
    if (!importNiche) {
      toast({
        title: 'Missing Niche',
        description: 'Please select a niche for enhancement.',
        variant: 'destructive',
      });
      return;
    }

    setIsEnhancing(true);
    
    try {
      // Call Claude AI to enhance the content
      const response = await apiRequest(
        'POST',
        '/api/claude-content',
        {
          prompt: `Please enhance the following ${importNiche} content for ${importPlatform} with a ${importTone} tone. 
          Make it more engaging, on-trend, and optimized for the platform.
          
          Original content:
          "${exportContent}"
          
          Please return only the enhanced content, with no explanations or additional text.`,
          niche: importNiche,
          tone: importTone,
          temperature: 0.7,
          maxTokens: 2048,
        }
      );

      const data = await response.json();
      setEnhancedContent(data.content);
      setExportContent(data.content);
      
      toast({
        title: 'Enhancement Complete',
        description: 'Content has been enhanced and optimized.',
      });
    } catch (error) {
      console.error('Enhancement failed:', error);
      toast({
        title: 'Enhancement Failed',
        description: 'Failed to enhance content. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsEnhancing(false);
    }
  };

  // Copy content to clipboard
  const handleCopyToClipboard = () => {
    navigator.clipboard.writeText(exportContent)
      .then(() => {
        setCopySuccess(true);
        setTimeout(() => setCopySuccess(false), 2000);
        toast({
          title: 'Copied to Clipboard',
          description: 'Content has been copied to your clipboard.',
        });
      })
      .catch(err => {
        console.error('Failed to copy:', err);
        toast({
          title: 'Copy Failed',
          description: 'Failed to copy to clipboard. Please try again.',
          variant: 'destructive',
        });
      });
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-4">Export & Import System</h1>
      <p className="text-gray-600 mb-6">
        Export your generated content in various formats or import existing content to enhance with GlowBot's AI.
      </p>
      
      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="export">Export Content</TabsTrigger>
          <TabsTrigger value="import">Import Content</TabsTrigger>
        </TabsList>
        
        {/* Export Content Tab */}
        <TabsContent value="export" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Export Your Content</CardTitle>
              <CardDescription>
                Convert your content to various formats for use in different platforms.
              </CardDescription>
            </CardHeader>
            
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="export-title">Content Title</Label>
                <Input
                  id="export-title"
                  placeholder="Enter a title for your content"
                  value={exportTitle}
                  onChange={(e) => setExportTitle(e.target.value)}
                />
              </div>
              
              <div>
                <Label htmlFor="export-content">Content</Label>
                <Textarea
                  id="export-content"
                  placeholder="Enter your content here or import from the Import tab"
                  className="min-h-[200px]"
                  value={exportContent}
                  onChange={(e) => setExportContent(e.target.value)}
                />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="export-format">Export Format</Label>
                  <Select value={exportFormat} onValueChange={setExportFormat}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select format" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="markdown">Markdown (.md)</SelectItem>
                      <SelectItem value="html">HTML (.html)</SelectItem>
                      <SelectItem value="txt">Plain Text (.txt)</SelectItem>
                      <SelectItem value="json">JSON (.json)</SelectItem>
                      <SelectItem value="glowbot">GlowBot Format (.glowbot)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div>
                  <Label htmlFor="export-type">Export Type</Label>
                  <Select value={exportType} onValueChange={setExportType}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="single">Single Content</SelectItem>
                      <SelectItem value="batch" disabled>Batch Export (Coming Soon)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                {importedData && (
                  <div className="md:col-span-2">
                    <div className="flex items-center space-x-2">
                      <div className="h-2 w-2 rounded-full bg-green-500"></div>
                      <p className="text-sm text-gray-500">
                        Content imported from {importedData.metadata.platform}. 
                        Generated on {new Date(importedData.metadata.generatedAt).toLocaleDateString()}.
                      </p>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
            
            <CardFooter className="flex justify-between">
              <div className="space-x-2">
                <Button 
                  variant="outline" 
                  onClick={handleCopyToClipboard}
                  className="flex items-center"
                >
                  {copySuccess ? (
                    <CheckCircle2 className="w-4 h-4 mr-2 text-green-500" />
                  ) : (
                    <Clipboard className="w-4 h-4 mr-2" />
                  )}
                  Copy to Clipboard
                </Button>
                
                <Button 
                  variant="outline" 
                  onClick={handleEnhanceContent} 
                  disabled={isEnhancing || !exportContent}
                  className="flex items-center"
                >
                  {isEnhancing ? (
                    <span className="animate-spin mr-2">⟳</span>
                  ) : (
                    <Sparkles className="w-4 h-4 mr-2" />
                  )}
                  Enhance Content
                </Button>
              </div>
              
              <Button 
                onClick={handleExport} 
                disabled={isExporting || !exportContent}
                className="flex items-center"
              >
                <Download className="w-4 h-4 mr-2" />
                {isExporting ? 'Exporting...' : 'Export Content'}
              </Button>
            </CardFooter>
          </Card>
          
          {/* Content Settings Card */}
          <Card>
            <CardHeader>
              <CardTitle>Content Settings</CardTitle>
              <CardDescription>
                These settings will be included in the exported metadata to help with importing later.
              </CardDescription>
            </CardHeader>
            
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <Label htmlFor="import-niche">Niche</Label>
                  <Select value={importNiche} onValueChange={setImportNiche}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select niche" />
                    </SelectTrigger>
                    <SelectContent>
                      {NICHES.map((niche) => (
                        <SelectItem key={niche} value={niche}>
                          {niche.charAt(0).toUpperCase() + niche.slice(1)}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                
                <div>
                  <Label htmlFor="import-platform">Platform</Label>
                  <Select value={importPlatform} onValueChange={setImportPlatform}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select platform" />
                    </SelectTrigger>
                    <SelectContent>
                      {platforms.map((platform) => (
                        <SelectItem key={platform} value={platform}>
                          {platform}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                
                <div>
                  <Label htmlFor="import-tone">Tone</Label>
                  <Select value={importTone} onValueChange={setImportTone}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select tone" />
                    </SelectTrigger>
                    <SelectContent>
                      {tones.map((tone) => (
                        <SelectItem key={tone} value={tone}>
                          {tone.charAt(0).toUpperCase() + tone.slice(1)}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        {/* Import Content Tab */}
        <TabsContent value="import" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Import External Content</CardTitle>
              <CardDescription>
                Import content from various sources to enhance with GlowBot's AI.
              </CardDescription>
            </CardHeader>
            
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="import-format">Import Format</Label>
                  <Select value={importFormat} onValueChange={setImportFormat}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select format" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="txt">Plain Text</SelectItem>
                      <SelectItem value="markdown">Markdown</SelectItem>
                      <SelectItem value="html">HTML</SelectItem>
                      <SelectItem value="json">JSON</SelectItem>
                      <SelectItem value="glowbot">GlowBot Format</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div>
                  <Label htmlFor="file-upload">Upload File</Label>
                  <Input 
                    id="file-upload" 
                    type="file" 
                    onChange={handleFileUpload}
                    accept=".txt,.md,.html,.json,.glowbot"
                  />
                </div>
              </div>
              
              <div>
                <Label htmlFor="import-content">Paste Content</Label>
                <Textarea
                  id="import-content"
                  placeholder="Paste your content here or upload a file above"
                  className="min-h-[200px]"
                  value={importContent}
                  onChange={(e) => setImportContent(e.target.value)}
                />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <Label htmlFor="import-niche-select">Content Niche</Label>
                  <Select value={importNiche} onValueChange={setImportNiche}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select niche" />
                    </SelectTrigger>
                    <SelectContent>
                      {NICHES.map((niche) => (
                        <SelectItem key={niche} value={niche}>
                          {niche.charAt(0).toUpperCase() + niche.slice(1)}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                
                <div>
                  <Label htmlFor="import-platform-select">Target Platform</Label>
                  <Select value={importPlatform} onValueChange={setImportPlatform}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select platform" />
                    </SelectTrigger>
                    <SelectContent>
                      {platforms.map((platform) => (
                        <SelectItem key={platform} value={platform}>
                          {platform}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                
                <div>
                  <Label htmlFor="import-tone-select">Content Tone</Label>
                  <Select value={importTone} onValueChange={setImportTone}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select tone" />
                    </SelectTrigger>
                    <SelectContent>
                      {tones.map((tone) => (
                        <SelectItem key={tone} value={tone}>
                          {tone.charAt(0).toUpperCase() + tone.slice(1)}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardContent>
            
            <CardFooter className="flex justify-between">
              <div className="flex space-x-2">
                <Button
                  variant="outline"
                  onClick={() => {
                    setImportContent('');
                    setImportedData(null);
                  }}
                >
                  Clear
                </Button>
              </div>
              
              <Button 
                onClick={handleImport} 
                disabled={isImporting || !importContent}
                className="flex items-center"
              >
                <Upload className="w-4 h-4 mr-2" />
                {isImporting ? 'Importing...' : 'Import Content'}
              </Button>
            </CardFooter>
          </Card>
          
          <div className="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg border">
            <h3 className="text-lg font-medium mb-2">Supported Import Formats</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="flex items-start space-x-2">
                <FileText className="w-5 h-5 text-gray-500" />
                <div>
                  <h4 className="font-medium">Plain Text (.txt)</h4>
                  <p className="text-sm text-gray-500">Simple text content with minimal formatting.</p>
                </div>
              </div>
              
              <div className="flex items-start space-x-2">
                <Code className="w-5 h-5 text-gray-500" />
                <div>
                  <h4 className="font-medium">Markdown (.md)</h4>
                  <p className="text-sm text-gray-500">Content with Markdown formatting.</p>
                </div>
              </div>
              
              <div className="flex items-start space-x-2">
                <File className="w-5 h-5 text-gray-500" />
                <div>
                  <h4 className="font-medium">HTML (.html)</h4>
                  <p className="text-sm text-gray-500">Content with HTML markup.</p>
                </div>
              </div>
              
              <div className="flex items-start space-x-2">
                <Code className="w-5 h-5 text-gray-500" />
                <div>
                  <h4 className="font-medium">JSON (.json)</h4>
                  <p className="text-sm text-gray-500">Structured content in JSON format.</p>
                </div>
              </div>
              
              <div className="flex items-start space-x-2">
                <FileText className="w-5 h-5 text-blue-500" />
                <div>
                  <h4 className="font-medium">GlowBot (.glowbot)</h4>
                  <p className="text-sm text-gray-500">Specialized format with content and metadata.</p>
                </div>
              </div>
            </div>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}
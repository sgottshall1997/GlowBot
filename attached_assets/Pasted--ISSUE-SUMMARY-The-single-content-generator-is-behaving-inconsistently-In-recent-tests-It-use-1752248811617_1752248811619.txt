üö® ISSUE SUMMARY:
The single content generator is behaving inconsistently. In recent tests:
- It used the **wrong product**
- I received a **500 server error**
- It passed through an **empty script**
- I was using **Claude + Spartan format**, but this behavior must be validated across all model/format combinations

‚úÖ GOAL:
Fully debug and harden the **unified content generator** so that both **manual (single)** and **automated (bulk)** generation modes:
- Always return a correct, non-empty script
- Respect selected model (Claude or GPT)
- Apply the correct format (Spartan, default, etc.)
- Handle errors gracefully with useful logs
- Store content with the correct product and metadata
- Pass validation before dispatching to Make.com

üîç CHECKPOINTS TO VALIDATE:

1. **Product Association**
   - Ensure the selected product from UI is always correctly passed into the generator
   - Fix any mismatch between input payload and final stored content

2. **Script Output Validation**
   - Block generation from completing if `script` field is empty or only whitespace
   - Add post-generation validation that rejects or retries invalid outputs
   - Return an informative error message (not a 500) if the LLM fails to return usable content

3. **Claude + Spartan Mode**
   - Confirm promptFactory is correctly formatting for Spartan output
   - Ensure Claude model is invoked if selected ‚Äî not falling back silently to GPT
   - Script output should be lean, direct, and match Spartan expectations

4. **All Format + Model Combinations**
   - Run tests for every valid combination:
     a. Claude + Spartan  
     b. Claude + Default  
     c. GPT + Spartan  
     d. GPT + Default  
   - Validate outputs are model-correct and format-correct
   - Store results and confirm that payloads to webhooks reflect correct model/format info

5. **Error Handling**
   - Catch and log 500 errors with full stack trace
   - Fallback to retry or notify user with specific error if:
     - Model fails
     - Prompt formatting fails
     - Required fields are missing (e.g. product, script, captions)

6. **Testing Suite**
   üîÅ Run a full test suite with the following:
   - 2 single generations for each model/format pair
   - 1 bulk run (7 niches) where each uses a different model/format combo
   - Confirm each of the 11 generated outputs:
     - Has valid, non-empty script
     - Correctly assigned product
     - Claimed model matches actual model used
     - Correct formatting applied
     - Evaluated and routed to webhook only if valid

7. ‚úÖ Final Output
   - Return a markdown summary:
     - What bugs were found + fixed
     - Log of each test case with product, script preview, model used, format used
     - Confirmation that all routes (Claude/GPT, Spartan/Default, single/bulk) now work reliably
     - Examples of failed states (if caught) and how they are now handled
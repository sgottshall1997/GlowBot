You are working in a React + Vite + Express + PostgreSQL + Drizzle app.

GOAL
Replicate the GlowBot Content History & Rating system in the CookAIng module with the SAME capabilities and file structure (scoped to /cookaing-marketing). 
Include: content history CRUD, user 1–100 ratings, dual AI evaluation (ChatGPT + Claude; 1–10 per dimension), Google Sheets sync, Make.com webhook emit, smart-learning recommendations, A/B suggestions, exports, and performance analytics updates.

REFERENCE (DO NOT MODIFY; PARITY ONLY)
- shared/schema.ts
- shared/contentGenerationHistory.ts
- shared/contentHistoryUtils.ts
- server/api/history.ts
- server/api/rating.ts
- server/api/sync-ratings.ts
- server/api/content-evaluation.ts
- server/services/aiEvaluationService.ts
- server/services/ratingSystem.ts
- server/services/claude.ts
- server/services/openai.ts
- client/src/pages/EnhancedContentHistory.tsx
- client/src/components/ContentRating.tsx
- client/src/components/SyncRatingsButton.tsx
- client/src/components/ContentEvaluationPanel.tsx
- server/db.ts, server/storage.ts, drizzle.config.ts

SCOPE / GUARDRAILS
- ADDITIVE ONLY. Do not refactor, rename, or delete non-CookaIng files.
- Server endpoints under: /api/cookaing-marketing/**
- Client pages/components under: /src/cookaing-marketing/**
- Database: Drizzle migrations (non-destructive).
- Must run in MOCK mode with empty .env (no external keys).
- Respect existing feature flags and analytics_events table.

===============================================================================
A) DATA MODEL (Drizzle)
===============================================================================
Create new tables (non-destructive) mirroring GlowBot semantics; prefix not required, scope by routes.

1) content_versions
- id uuid pk
- campaign_id uuid null
- recipe_id uuid null
- source_job_id uuid null          -- link to Unified Content Generator job if applicable
- channel text not null            -- 'video_script'|'social'|'blog'|'email'|'push'|'affiliate'|...
- platform text null               -- 'tiktok'|'instagram'|'yt-long'|'carousel'|...
- title text null
- summary text null
- niche text null                  -- e.g., pantry hacks, vegan, etc.
- template text null               -- blueprint/template name
- model text null                  -- ai model identifier used (mock/openai/claude)
- metadata_json jsonb not null     -- persona/tone/duration/options
- payload_json jsonb not null      -- immutable snapshot of the content
- created_by text null
- created_at timestamp default now()
- version int not null default 1
- unique(campaign_id, channel, platform, version) where campaign_id is not null

2) content_ratings
- id uuid pk
- version_id uuid not null references content_versions(id) on delete cascade
- user_score int null              -- 1–100 manual rating
- ai_virality int null             -- 1–10
- ai_clarity int null              -- 1–10
- ai_persuasiveness int null       -- 1–10
- ai_creativity int null           -- 1–10
- thumb text null                  -- 'up'|'down'|null (optional)
- reasons text[] null              -- ['catchy','clear','on-brand','too-long',...]
- notes text null
- is_winner boolean not null default false
- created_by text null
- created_at timestamp default now()

3) content_links
- id uuid pk
- version_id uuid not null references content_versions(id) on delete cascade
- artifact_id uuid null            -- link campaign_artifacts if attached
- job_id uuid null                 -- link content_jobs if generated
- type text not null               -- 'artifact'|'job'
- created_at timestamp default now()

4) content_exports (optional)
- id uuid pk
- version_id uuid not null references content_versions(id) on delete cascade
- format text not null             -- 'json'|'csv'|'markdown'
- payload text not null
- created_at timestamp default now()

Indexes:
- content_versions (campaign_id, channel, platform, created_at)
- content_ratings (version_id, created_at)
- content_ratings (is_winner)

===============================================================================
B) SERVER: STORAGE & SERVICES
===============================================================================
Create CookAIng-scoped equivalents; keep function parity with reference files.

1) /src/cookaing-marketing/db/storage.ts
- CRUD helpers for content_versions, content_ratings, content_links, content_exports.
- Snapshots from campaign_artifacts into content_versions (“snapshot & rate” flow).
- Aggregations: average user_score, ai dimension averages, thumbs %, last_rated_at, rating_count.

2) /src/cookaing-marketing/services/ratingSystem.ts
- Compute aggregates and a "quality_score" (0–100) from user_score + AI dimensions (weighted).
- Smart-learning:
  * Extract common tokens from top-rated content (n-grams from titles, hooks, CTAs).
  * Surface “reuse suggestions” (rank by quality_score with recency decay).
  * A/B suggestion generator: propose subject/hook/CTA variants based on high-scoring patterns.
- Export utilities: CSV/JSON encoders.

3) /src/cookaing-marketing/services/ai/openai.ts & claude.ts
- Thin wrappers. If no keys present → MOCK mode returning deterministic 1–10 scores.
- Env:
  * OPENAI_API_KEY (optional)
  * ANTHROPIC_API_KEY (optional)

4) /src/cookaing-marketing/services/aiEvaluationService.ts
- Dual-eval orchestrator:
  * Given payload_json + metadata_json, request scores from OpenAI + Claude (or mocks).
  * Normalize to 1–10 per dimension (virality, clarity, persuasiveness, creativity).
  * Persist resulting content_ratings row (ai_* fields) without user_score.
  * Return merged evaluation summary.

===============================================================================
C) SERVER: API ROUTES (parity with your list)
===============================================================================
Mount all under /api/cookaing-marketing/**

1) GET /history
Query params: campaignId?, recipeId?, channel?, platform?, niche?, template?, model?, q?, limit?, offset?
- Returns paginated content_versions with aggregates:
  { version, title, summary, niche, platform, template, model, createdAt,
    agg: { avgUserScore, ai:{virality,clarity,persuasiveness,creativity}, thumbsUp, thumbsDown, lastRatedAt, ratingCount, qualityScore },
    links: { artifactId?, jobId? } }

2) GET /history/:id
- Returns full version detail with payload_json, metadata_json, aggregates, and ratings[].

3) POST /history/versions
body: { campaignId?, recipeId?, sourceJobId?, channel, platform?, title?, summary?, niche?, template?, model?, metadataJson, payloadJson }
- Creates a new content_versions row (auto-increment version within scope).
- Creates content_links for artifact or job if provided.

4) POST /rating
body: { versionId, user_score?, thumb?, reasons?, notes?, isWinner? }
- Inserts a content_ratings row. If isWinner=true, unset previous winners for the (campaignId, channel, platform) scope.
- Append analytics_events row type='rating' with data (scores, isWinner).

5) PATCH /rating/:id
- Update rating fields (notes, isWinner).

6) POST /content-evaluation
body: { versionId } OR { payloadJson, metadataJson }
- Runs Dual AI (or mocks), persists ai_* fields to a new content_ratings row (no user_score), returns summary.

7) POST /sync-ratings
body: { sheetId, range, mode:'append'|'replace' }
- If GOOGLE_SERVICE_ACCOUNT_JSON present → sync to Google Sheets.
- If missing → MOCK: write to a local CSV in /tmp and return file path.

8) GET /reuse-suggestions
Query: campaignId?, channel?, limit=10
- Returns top-N historical versions by quality_score (with recency decay), including quick links to “clone to campaign”.

9) POST /versions/:id/clone-to-campaign
body: { targetCampaignId }
- Creates a new campaign_artifacts row with the version payload; records link.

10) POST /webhooks/make
- Emits webhook payloads for Make.com when ratings or versions are created/updated (respect a MAKE_WEBHOOK_URL env; noop in mock).

===============================================================================
D) FRONTEND: PAGES & COMPONENTS
===============================================================================
Files under /src/cookaing-marketing/**

1) pages/history/EnhancedContentHistory.tsx  (CookAIng version)
- Filters: campaign, recipe, channel, platform, niche, template, model, text search.
- Table: version, title, channel/platform, niche/template, createdAt, avg user score, AI dims, qualityScore, winner badge.
- Row actions: Open, Clone to Campaign, Export JSON/CSV.
- Right Drawer (Version Detail):
  * Preview tab (render payload_json using existing viewers for script/social/blog/email/push).
  * Ratings tab (list + add rating form).
  * AI Evaluation tab (trigger dual eval and display scores).
  * Links tab (artifact/job deep-links).
  * JSON tab.

2) components/ratings/ContentRating.tsx
- User 1–100 slider + optional thumbs + reasons[] checklist + notes + Winner toggle.
- Displays aggregates (avg, count, last rated).
- On submit → POST /rating.

3) components/SyncRatingsButton.tsx
- Button opens modal to set sheetId/range → calls /sync-ratings.
- If no Google creds → show mock export (download CSV).

4) components/ContentEvaluationPanel.tsx
- Trigger /content-evaluation for the current version.
- Show side-by-side AI scores (OpenAI vs Claude vs Merged).
- Explain scoring rubric (1–10 per dimension).

5) Integration points:
- Unified Content Generator preview: add “Save & Rate” and “Evaluate with AI” buttons.
- Campaign detail artifact viewer: add “Snapshot & Rate” (creates version from artifact) and “Evaluate with AI”.

6) Sidebar & Routing:
- Add “Content History” link → /cookaing-marketing/history
- Ensure InstructionFooter appended with page-specific guidance.

===============================================================================
E) INTEGRATIONS & CONFIG
===============================================================================
Env (optional; mock if missing):
- OPENAI_API_KEY
- ANTHROPIC_API_KEY
- GOOGLE_SERVICE_ACCOUNT_JSON (base64 or raw JSON)  -- for Sheets
- GOOGLE_SHEETS_SYNC_RANGE (default range)
- MAKE_WEBHOOK_URL (optional)

Google Sheets:
- If creds absent → mock export to /tmp and return a downloadable file; UI shows “mock mode”.

Make.com:
- On version create/update and rating create/update, POST minimal payload (versionId, campaignId, scores, qualityScore) to MAKE_WEBHOOK_URL if present; otherwise noop.

Analytics:
- Insert analytics_events on rating create/update (type='rating', data:{scores,isWinner}).
- Extend /reports/performance to include avg user_score and quality_score per campaign/channel.

===============================================================================
F) SEEDS & EXPORTS
===============================================================================
Seeds (dev only):
- 10–15 content_versions across channels (video_script short/long, social, email, blog, push).
- Ratings: 30–40 mixed user_score + AI scores; 1–2 winners per (campaign,channel,platform) scope.

Exports:
- Add “Export JSON” and “Export CSV” actions in history table; POST → content_exports (optional) and return file.

===============================================================================
G) TESTS
===============================================================================
Vitest:
- Versioning increments per (campaign,channel,platform) scope.
- Winner toggle clears prior winners atomically.
- Dual AI returns deterministic mock scores when keys missing; merges correctly.
- reuse-suggestions sorted by quality_score with recency weight.
- clone-to-campaign creates campaign_artifacts and content_links.

Playwright (mock mode):
- Navigate to /cookaing-marketing/history → filter → open version.
- Rate content (set user 1–100, reasons, notes, winner) → aggregates update.
- Run AI Evaluation → scores appear; averages recalc.
- Clone to Campaign → artifact visible in target campaign detail.
- Sync Ratings → with no Google creds, CSV download succeeds.

===============================================================================
H) ACCEPTANCE
===============================================================================
- CookAIng has a full Content History page with CRUD, filters, ratings, AI eval, exports, cloning, and links.
- Rating widget usable from History, Generator preview, and Campaign artifacts.
- Dual AI eval runs (or mocks) and persists; suggestions feed A/B and Reports.
- Google Sheets sync works (or mocks); Make.com webhook emits (or noops).
- All works with empty .env; no regressions to GlowBot components.
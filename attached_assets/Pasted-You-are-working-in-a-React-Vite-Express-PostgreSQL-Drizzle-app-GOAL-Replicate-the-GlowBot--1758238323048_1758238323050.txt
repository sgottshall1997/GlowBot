You are working in a React + Vite + Express + PostgreSQL + Drizzle app.

GOAL
Replicate the GlowBot "Content History + Ratings" system for the CookAIng module, with identical user flows and data semantics:
- Every generated asset (scripts, captions, carousels, blog, email, push, affiliate blurbs, etc.) is versioned and reviewable.
- Users can rate each version (1–5 stars and/or thumbs up/down), tag reasons, leave notes, and mark winners.
- History is visible from the Unified Content Generator, Campaign detail, and a standalone “Content History” page.
- Ratings feed back into A/B decisions and Reports (quality score, reuse suggestions).
- Must work with seed/mocks and empty .env.

SCOPE / GUARDRAILS
- ADDITIVE ONLY. Do not modify GlowBot code; replicate the patterns within CookAIng.
- Server under: /api/cookaing-marketing/**
- Client under: /src/cookaing-marketing/**
- Database changes via Drizzle migrations (non-destructive).
- Respect feature flags; no external API calls required.

======================================================================
A) DATABASE & MODELS
======================================================================
1) Drizzle migrations (new tables, non-destructive):
   - content_versions
     ( id uuid pk, campaign_id uuid null, recipe_id uuid null, source_job_id uuid null,
       channel text not null,          -- 'video_script'|'social'|'blog'|'email'|'push'|'affiliate'|...
       platform text null,             -- 'tiktok'|'instagram'|'yt-long'|'carousel'|...
       version int not null default 1,
       title text null,
       summary text null,
       payload_json jsonb not null,    -- frozen, immutable copy of the generated asset
       metadata_json jsonb not null,   -- blueprintId, persona, tone, duration, etc.
       created_by text null,
       created_at timestamp not null default now(),
       unique(campaign_id, channel, platform, version) where campaign_id is not null
     )

   - content_ratings
     ( id uuid pk, version_id uuid not null references content_versions(id) on delete cascade,
       score int null,                 -- 1..5 (nullable if using only thumbs)
       thumb text null,                -- 'up'|'down'|null
       reasons text[] null,            -- ['catchy','clear','on-brand','too-long',...]
       notes text null,
       is_winner boolean not null default false,
       created_by text null,
       created_at timestamp not null default now()
     )

   - content_links
     ( id uuid pk, version_id uuid not null references content_versions(id) on delete cascade,
       artifact_id uuid null,          -- link to campaign_artifacts when attached
       job_id uuid null,               -- link to content_jobs when created by generator
       type text not null,             -- 'artifact'|'job'
       created_at timestamp not null default now()
     )

   - OPTIONAL: content_tags (id, version_id fk, tag text) for freeform tagging (if needed)

2) Backfill/association rules:
   - When generating assets via Unified Content Generator (/content/generate), write a new row to content_versions for each asset and create content_links to the originating job and to any persisted campaign_artifacts.
   - When attaching to a campaign (existing artifact), snapshot payload_json into a new content_versions row and link to the artifact.

======================================================================
B) SERVER API
======================================================================
3) Routes (JSON; return shapes consistent with GlowBot patterns):
   - GET  /api/cookaing-marketing/content/history?campaignId=&channel=&platform=&recipeId=&q=&limit=&offset=
     → Paginated list of content_versions with aggregate rating stats (avg score, up/down counts, last rated).
   - GET  /api/cookaing-marketing/content/versions/:id
     → Full version detail: payload_json, metadata_json, ratings[], links[].
   - POST /api/cookaing-marketing/content/versions
     body: { campaignId?, recipeId?, sourceJobId?, channel, platform?, title?, summary?, payloadJson, metadataJson }
     → Create version; return version (with computed version number in its scope).
   - POST /api/cookaing-marketing/content/ratings
     body: { versionId, score?, thumb?, reasons?, notes?, isWinner? }
     → Create rating; if isWinner=true, unset previous winners for same (campaignId, channel, platform) scope.
     → Append an analytics_events row (type='rating', fields: score, thumb, reasons).
   - PATCH /api/cookaing-marketing/content/ratings/:id
     → Update rating (notes/isWinner).
   - POST /api/cookaing-marketing/content/versions/:id/clone-to-campaign
     body: { targetCampaignId }
     → Duplicate payload_json into a new campaign_artifacts row for the target campaign and link via content_links.
   - GET  /api/cookaing-marketing/content/reuse-suggestions?campaignId=&channel=
     → Returns top-N historical versions with best ratings for reuse (score DESC, recency weight).

4) Integration with A/B and Reports:
   - When POST /ab/decide sets a winner, also create a content_ratings row on the winning artifact’s version with isWinner=true (idempotent).
   - Extend /reports/performance to include average rating per channel/campaign and a “Quality Score” (avg score normalized 0–100).

5) Mock mode:
   - All endpoints function with empty .env; seed data provides examples.
   - No external network calls are required.

======================================================================
C) CLIENT UI
======================================================================
6) New page: /cookaing-marketing/history (Content History)
   - Filters: campaign, channel, platform, recipe, text search.
   - Table: version, title/summary, channel/platform, createdAt, avg score, up/down, winner badge, “open”, “clone to campaign”.
   - Right drawer: version detail (tabs):
     * Preview (renders payload_json via the same viewers as Campaign Artifacts)
     * Ratings (list + add rating form: stars + thumbs + reasons checklist + notes + winner toggle)
     * Links (artifact/job references, with deep-links)
     * JSON (raw payload/metadata for debugging)

7) Rating widgets (reusable component)
   - /src/cookaing-marketing/components/ratings/RatingWidget.tsx
   - Embeddable on:
     * Unified Content Generator preview panel
     * Campaign detail artifact viewer
     * Content History detail drawer
   - Supports: 1–5 stars, thumbs, reasons (chips), notes, mark as winner.
   - Show aggregates: avg score, total ratings, last rated time, % thumbs up.

8) In-place actions:
   - From generator preview: “Save & Rate” → persists version + prompts rating modal in one step.
   - From campaign artifact: “Snapshot & Rate” → fetch artifact, create content_versions snapshot, open rating modal.
   - From version drawer: “Clone to Campaign” → choose target campaign → create artifact and link.

9) Docs & InstructionFooter:
   - Update /cookaing-marketing/docs with a “Content History & Ratings” section (data model, scopes, winner rules, reuse suggestions).
   - On each relevant page (Content, Campaign detail, History), append an InstructionFooter explaining how to rate, mark winners, and reuse.

======================================================================
D) SEEDS & ANALYTICS
======================================================================
10) Seeds:
   - Create 8–12 content_versions spanning channels (video_script short/long, social, email, blog, push).
   - Add 20–30 content_ratings spread with varied scores, reasons, and 1–2 winners per (campaign,channel,platform) scope.
   - Link a subset to existing campaign_artifacts and content_jobs.

11) Analytics events:
   - On rating create/update → insert analytics_events row (type='rating', values).
   - OPTIONAL: extend Dashboard widgets with “Top Rated This Month” and “Ratings volume” sparkline.

======================================================================
E) TESTS
======================================================================
12) Vitest:
   - content_versions versioning increments correctly per scope.
   - ratings winner toggle clears prior winners atomically.
   - reuse-suggestions returns sorted list by score + recency decay.
   - clone-to-campaign creates artifact and link.
   - endpoints serialize shapes expected by UI.

13) Playwright (mock mode):
   - Navigate to /cookaing-marketing/history → filter → open version → add rating (stars + reasons) → mark winner → see badge.
   - From generator preview: Save & Rate → appears in history with aggregates.
   - From campaign detail: Snapshot & Rate → version visible; Clone to Campaign → artifact appears in target campaign.

======================================================================
F) ACCEPTANCE
======================================================================
- Content History page exists with filters, table, drawers, and rating actions.
- RatingWidget available in generator preview, campaign artifact viewer, and history.
- Rating events append to analytics; Reports include Quality Score and avg rating.
- A/B “winner” syncs to ratings; “reuse suggestions” available.
- All works with seeds in mock mode; no external keys required; no regressions.
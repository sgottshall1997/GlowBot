CONSTRAINTS
- ADDITIVE ONLY. Do not refactor, rename, or delete non-CookaIng code.
- Backend routes under /api/cookaing-marketing/**
- Frontend under /src/cookaing-marketing/**
- Drizzle migrations: non-destructive only.
- Must run fully in MOCK mode with empty .env (no external keys).
- All new capabilities are feature-flagged; hidden or greyed out when disabled.
- Preserve existing tests & functionality.

GOAL (PHASE 1 ONLY)
Stand up the foundation so the full surface area exists and runs in mock mode:
(1) database scaffolding, (2) provider interfaces with mock adapters, (3) baseline services,
(4) health endpoints, (5) feature flags & shared types, (6) minimal UI pages/tabs/buttons
for every future capability, (7) seeds & docs, (8) CI tests (Vitest + Playwright).

================================================================
A) FEATURE FLAGS & SHARED TYPES
================================================================
1) /src/cookaing-marketing/config/flags.ts
   - ENABLE_IMAGE_GEN, ENABLE_VIDEO_GEN, ENABLE_TTS, ENABLE_REWRITE
   - ENABLE_COMPETITOR_ANALYSIS, ENABLE_SENTIMENT, ENABLE_VIRAL_PREDICT, ENABLE_FATIGUE_DETECT
   - ENABLE_SOCIAL_PUBLISH, ENABLE_SOCIAL_ENGAGE, ENABLE_HASHTAG_RESEARCH, ENABLE_OPTIMAL_TIMING
   - ENABLE_DYNAMIC_ADAPT, ENABLE_BRAND_VOICE_LEARN
   - ENABLE_COLLAB, ENABLE_CLIENT_PORTAL, ENABLE_CALENDAR
   - ENABLE_CRM_INTEGRATIONS, ENABLE_ECOMMERCE, ENABLE_ADV_EMAIL_AUTOMATION, ENABLE_SMS_WHATSAPP
   - ENABLE_CUSTOM_MODEL_PLACEHOLDERS, ENABLE_MULTIMODAL_PROMPTS, ENABLE_REALTIME_OPT
   - ENABLE_MODERATION, ENABLE_BRAND_SAFETY, ENABLE_PLAGIARISM
   - Read from import.meta.env; export getters.

2) /src/cookaing-marketing/types/ext.ts
   - Define shared interfaces for provider requests/responses (ImageGenRequest/Response, VideoGen*, TTSAudio*, Rewrite*, CompetitorPost, SentimentSnapshot, ViralScore, FatigueSignal, SocialQueueItem, HashtagSuggestion, OptimalTimes, BrandVoiceProfile, Approval, CalendarItem, CRMSync, EcomProduct, ModerationReport, PlagiarismReport).

================================================================
B) DATABASE (MIGRATIONS – NON-DESTRUCTIVE)
================================================================
Create minimal tables to support Phase 1 stubs (no heavy constraints yet):
- media_assets(id, type, source, url, thumb_url, metadata_json, status, created_at)
- content_enhancements(id, version_id, enhancement, inputs_json, outputs_json, provider, status, created_at)
- competitor_posts(id, source_platform, author, url, captured_at, text, metrics_json, tags)
- sentiment_snapshots(id, scope, ref_id, score, magnitude, labels_json, created_at)
- viral_scores(id, content_version_id, features_json, score, model, created_at)
- fatigue_signals(id, segment_id, topic, slope, last_seen_at, created_at)
- social_queue(id, platform, account_id, scheduled_at, payload_json, status, result_json, created_at)
- hashtag_suggestions(id, topic, platform, tags, metrics_json, created_at)
- optimal_times(id, platform, segment_id, times_json, created_at)
- brand_voice_profiles(id, name, corpus_json, created_at)
- approvals(id, entity_type, entity_id, status, assignee, notes, created_at)
- collaboration_roles(id, user, role, scopes_json, created_at)
- content_calendar(id, title, start_at, end_at, channel, ref_id, status, created_at)
- ecommerce_products(id, source, external_id, title, price, url, image, inventory_json, tags)
- messaging_sequences(id, channel, name, steps_json, triggers_json, status, created_at)
- moderation_reports(id, version_id, checks_json, decisions_json, status, created_at)
- plagiarism_reports(id, version_id, score, matches_json, created_at)
Add helpful indexes for lookups (created_at, platform, status).

================================================================
C) PROVIDER INTERFACES + MOCK ADAPTERS
================================================================
Create /src/cookaing-marketing/services/providers/* with interface + mock implementation:
- imageGen.provider.ts, videoGen.provider.ts, tts.provider.ts, rewrite.provider.ts
- competitor.provider.ts, sentiment.provider.ts, viral.provider.ts, fatigue.provider.ts
- social.provider.ts (publish/engage), hashtag.provider.ts, timing.provider.ts
- personalization.provider.ts (dynamic adapt), brandVoice.provider.ts
- collab.provider.ts, calendar.provider.ts
- crm.provider.ts, ecommerce.provider.ts, messaging.provider.ts
- moderation.provider.ts, plagiarism.provider.ts, multimodal.provider.ts, realtimeOpt.provider.ts
Each adapter: detect env var presence; if missing → deterministic MOCK result (include `mode: 'mock'` in response).

================================================================
D) SERVICES (THIN ORCHESTRATORS)
================================================================
Create /src/cookaing-marketing/services/*.service.ts to call providers and persist minimal records:
- media.service.ts, enhancement.service.ts, intelligence.service.ts,
  social.service.ts, personalization.service.ts, brandVoice.service.ts,
  collab.service.ts, calendar.service.ts, integrations.service.ts,
  messaging.service.ts, moderation.service.ts, realtimeOpt.service.ts
Each service: input validation, provider call, persist record, return DTO.

================================================================
E) API ROUTES (STUBS THAT WORK IN MOCK MODE)
================================================================
Mount under /api/cookaing-marketing:
- /enhance/rewrite, /enhance/tts, /enhance/image, /enhance/video (POST)
- /intel/competitors/scan (POST), /intel/competitors (GET)
- /intel/sentiment/snapshot (POST), /intel/viral/score (POST), /intel/fatigue/compute (POST)
- /social/publish (POST), /social/engage (POST), /social/hashtags (GET), /social/optimal-times (GET)
- /personalize/dynamic (POST), /voice/learn (POST), /voice/profiles (GET)
- /collab/roles (POST/GET), /approvals/submit (POST), /approvals/decision (POST)
- /calendar (GET/POST)
- /integrations/crm/sync (POST), /integrations/ecom/sync (POST)
- /messaging/sequence/run (POST)
- /ai/multimodal/prompt (POST), /ai/realtime/optimize (POST)
- /compliance/moderate (POST), /compliance/plagiarism (POST)

All endpoints: respond with mock payloads and persist minimal records.

================================================================
F) HEALTH ENDPOINTS
================================================================
Extend GET /api/cookaing-marketing/integrations/health to include:
- imageGen, videoGen, tts, rewrite, competitors, sentiment, viral, fatigue,
  socialPublish, socialEngage, hashtags, optimalTimes, dynamicContent,
  brandVoice, collab, calendar, crm, ecommerce, smsWhatsApp,
  multimodal, realtimeOpt, moderation, plagiarism
Status logic: 'ok' if keys present and self-check passes; 'mock_mode' if no keys but mocks wired; 'missing_keys' if feature flag enabled but no keys and no mocks (shouldn’t happen); 'error' on exception.

================================================================
G) SURFACE UI (MINIMAL PAGES & TABS)
================================================================
Add routes & stub pages (shadcn/ui cards + skeletons + InstructionFooter):
- /cookaing-marketing/intelligence (tabs: Competitors, Sentiment, Viral Predictor, Fatigue)
- /cookaing-marketing/social-automation (tabs: Publish, Engagement, Hashtags, Optimal Times)
- /cookaing-marketing/personalization (panels: Dynamic Adaptation, Brand Voice profiles)
- /cookaing-marketing/collaboration (roles table, approvals board)
- /cookaing-marketing/calendar (drag/drop calendar; mock data)
- /cookaing-marketing/integrations (CRM/E-com sync buttons; mock results)
- /cookaing-marketing/messaging (sequence list; “Run to mock queue”)
- /cookaing-marketing/ai-lab (Multimodal prompt, Real-time Optimization runner)
- /cookaing-marketing/compliance (Moderation & Plagiarism mock results)
- Enhance tab on /cookaing-marketing/content linking to rewrite/tts/image/video stubs
Each page: read feature flags; if disabled → grey out with tooltip.

================================================================
H) SEEDS & DOCS
================================================================
- Seeds: insert a small set of mock records per new table (2–5 rows/table).
- Docs: update /cookaing-marketing/docs with a new “Phase 1 Surface Map” listing all new endpoints, flags, envs, and page links; note MOCK behavior.

================================================================
I) TESTS
================================================================
Vitest (unit/integration):
- Provider mocks return deterministic payloads when keys missing.
- Services persist and return DTOs; basic validation.
- Health endpoint returns 'mock_mode' for all new adapters with empty .env.

Playwright (e2e in mock mode):
- Navigate to each new page; tabs render; actions return mock responses; toasts show success.
- Health page lists all new adapters with correct status chips.
- Feature-flag toggles hide/disable pages accordingly.

================================================================
J) ACCEPTANCE (PHASE 1 DONE)
================================================================
- All new routes/pages exist and respond in mock mode (no keys).
- Health includes all new adapters; status is 'mock_mode' with empty .env.
- Seeds populate minimal data; docs updated with surface map.
- Vitest + Playwright pass; no regressions to existing CookAIng features.

Lastly: Run the Vitest + Playwright suites in an empty .env. Then, manually click through each new CookAIng page (Intelligence, Social Automation, Personalization, Collaboration, Calendar, Integrations, Messaging, AI Lab, Compliance, and the new Enhance tab on the Content page). Confirm mock responses, visible status chips on Health, feature-flag gating, InstructionFooters present, and zero console or server errors.
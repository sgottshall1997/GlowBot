CONSTRAINTS
- ADDITIVE ONLY; do not refactor or delete non-CookAIng code.
- Server under /api/cookaing-marketing/** ; client under /src/cookaing-marketing/**
- Use existing Phase 1 flags & provider interfaces. Must work fully in MOCK mode with empty .env.
- Persist enhancements to DB and allow attaching outputs to campaign_artifacts.
- Reuse link-signing util for any outbound links. Sanitize HTML.

GOAL (PHASE 2)
Ship end-to-end Content Enhancement features:
(1) Rewrite/Spin, (2) Text-to-Speech (TTS), (3) Image Generation, (4) Video Generation (template-driven storyboard + mock render),
wired to content_versions → content_enhancements → media_assets → campaign_artifacts.
Integrate into Unified Content Generator’s new “Enhance” tab and Campaign Detail.

================================================================
A) DATA & STORAGE (use Phase 1 tables)
================================================================
- content_versions: source content.
- content_enhancements: each enhancement run (enhancement: 'rewrite'|'tts'|'image'|'video'; inputs_json, outputs_json, provider, status).
- media_assets: for TTS audio, generated images, and video renders (url, thumb_url, metadata_json, status).
- content_links: link enhancements and media to versions and artifacts.

Add storage helpers:
/src/cookaing-marketing/db/storage.enhance.ts
- createEnhancement(versionId, type, inputs) → enhancement row
- upsertMediaAsset({type, url, thumb, meta}) → media row
- linkVersionToArtifact(versionId, artifactId)
- persistOutputs(enhancementId, outputs_json, {mediaAssets?})
- snapshotToCampaignArtifact({versionId|payloadJson, channel, platform, campaignId}) → campaign_artifacts row + link

================================================================
B) PROVIDERS (concrete implementations using Phase 1 interfaces)
================================================================
/src/cookaing-marketing/services/providers/*
- rewrite.provider.ts
  * live: OpenAI/Claude if keys present; else MOCK: rule-based rewrite (shorter/longer, tone swap, voice profile).
- tts.provider.ts
  * live: ElevenLabs or compatible; else MOCK: data:audio/wav base64 with synthetic metadata.
- imageGen.provider.ts
  * live: OpenAI Images/Stable Diffusion; else MOCK: placeholder URLs with prompt echo and seeded styles.
- videoGen.provider.ts
  * live: template pipeline (if FFMPEG_ENABLED true, just simulate); else MOCK: storyboard JSON + “render queued” -> “rendered” with placeholder mp4 URL.

All providers must include {mode:'live'|'mock'} in response and never throw on missing keys—return deterministic mock.

================================================================
C) SERVICES (orchestrators)
================================================================
/src/cookaing-marketing/services/enhancement.service.ts
- runRewrite(versionId, {style, length, voiceProfileId?, constraints?})
- runTTS(versionId, {voice, speed, scriptSource:'payload'|'custom', customText?})
- runImage(versionId, {prompt, count, style})
- runVideo(versionId, {templateId, duration, useAssetsFromVersion:boolean, extraAssets?})
Each:
  1) Load content_version payload_json & metadata_json
  2) Build provider request (respect brand voice if provided)
  3) Call provider; persist enhancement row; persist media assets if any
  4) Return DTO (enhancement + media + preview snippets)

Post-processing:
/src/cookaing-marketing/services/postprocess.enhance.ts
- sanitizeHTML, ensure JSON schema conformance where applicable
- link-sign URLs using existing link-signing util

================================================================
D) API ROUTES (final, not stubs)
================================================================
Mount under /api/cookaing-marketing:

POST /enhance/rewrite
  body: { versionId, style?, length?:'short'|'long', voiceProfileId?, constraints? }
  → returns { enhancement, previewText, mode }

POST /enhance/tts
  body: { versionId, voice, speed?:'slow'|'normal'|'fast', scriptSource?:'payload'|'custom', customText? }
  → returns { enhancement, media:{audioUrl, duration, meta}, mode }

POST /enhance/image
  body: { versionId, prompt, count?:number=3, style?:'real'|'studio'|'illustration' }
  → returns { enhancement, media:[{imageUrl, thumbUrl}], mode }

POST /enhance/video
  body: { versionId, templateId, duration?:30|60|120, useAssetsFromVersion?:boolean=true, extraAssets?:Array<{type:'image'|'audio'|'clip', url, meta}> }
  → returns { enhancement, media:{videoUrl?, storyboard}, status:'queued'|'rendered', mode }

POST /enhance/attach-to-campaign
  body: { enhancementId, campaignId, channel:'video_script'|'social'|'blog'|'email'|'push'|'affiliate'|'media', platform?, title?, summary? }
  → materializes a campaign_artifacts record from the enhancement outputs or linked media; returns artifact row

GET /enhance/list
  query: { versionId }
  → list enhancements with basic info and media

All routes: update analytics_events with type 'enhancement' and include details.

================================================================
E) CLIENT UI — Unified Content Generator (Enhance tab) + Campaign Detail
================================================================
1) /cookaing-marketing/content
  - Add “Enhance” tab with four cards: Rewrite, TTS, Image, Video.
  - Source selector = selected content_version from generator preview (or allow picking a version from history).
  - Each card:
    * small form (style/length/voice/etc.)
    * “Preview” (for rewrite show diff; for TTS play audio; for Image show thumbnails; for Video show storyboard)
    * “Attach to Campaign” → opens campaign picker, calls /enhance/attach-to-campaign, toast on success, deep-link to artifact.

  - Job Drawer: shows recent enhancements with status, links to media/artifacts.

2) Campaign Detail page
  - For any artifact, add “Enhancements” panel:
    * “Snapshot & Enhance” → creates content_version from artifact → opens Enhance tab prefilled.
    * List linked enhancements + one-click “Replace Artifact Content with This Enhancement” (creates new artifact version entry or updates as business rules allow—make this additive by creating a new artifact record and linking).

3) UX polish
  - shadcn/ui components; skeletons; toasts; copy buttons.
  - Respect feature flags (if a capability disabled, show greyed card with tooltip “Disabled by flag”).
  - InstructionFooter for the Enhance tab with how/why to use each enhancer.

================================================================
F) DOCS & HEALTH
================================================================
- Update /cookaing-marketing/docs → “Content Enhancement” section (what, setup, env keys, mock behavior, attach flow, safety notes).
- Extend /integrations/health statuses for imageGen, videoGen, tts, rewrite to reflect 'mock_mode' with empty .env and 'ok' when keys present.

================================================================
G) SEEDS
================================================================
- Add 3 demo content_versions (short script, long blog, email).
- Pre-seed 1 rewrite, 1 tts, 3 images, 1 video (mock) tied to one version.
- Provide one demo campaign to attach to.

================================================================
H) TESTS
================================================================
Vitest:
- Providers: deterministic mock outputs without keys; switch to 'live' only when keys present.
- Services: runRewrite/runTTS/runImage/runVideo persist enhancement rows and media as expected.
- attach-to-campaign creates campaign_artifacts and content_links.
- Post-process: HTML sanitized, links signed.

Playwright (mock mode):
- Go to /cookaing-marketing/content → Enhance tab:
  * Run Rewrite → see diff → attach to a campaign → artifact created.
  * Run TTS → audio plays → attach → media artifact appears in campaign.
  * Run Image → thumbnails appear → attach → media artifact present.
  * Run Video (mock) → storyboard visible → status transitions to 'rendered' → attach.
- Campaign Detail → Enhancements panel lists items; “Snapshot & Enhance” works.
- Health page shows four adapters with status chips.

================================================================
I) ACCEPTANCE
================================================================
- All four enhancement types function end-to-end in mock mode, create DB rows, and can attach to campaigns.
- Enhance tab UX is stable, with previews, toasts, and artifacts visible after attach.
- Docs + Health updated; seeds present; tests pass; no regressions to Phase 1.
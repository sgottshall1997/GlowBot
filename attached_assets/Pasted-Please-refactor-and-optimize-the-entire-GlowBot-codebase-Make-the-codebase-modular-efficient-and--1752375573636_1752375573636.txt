Please refactor and optimize the entire GlowBot codebase. Make the codebase modular, efficient, and clean for both the single content generator and the automated bulk generator. Here‚Äôs exactly what I want:

‚∏ª

üîÅ Deduplication & Cleanup
	‚Ä¢	Identify and remove any duplicated logic, especially:
	‚Ä¢	Prompt generation code
	‚Ä¢	Caption formatting logic
	‚Ä¢	Payload formatting or webhook sending
	‚Ä¢	Consolidate all shared logic (e.g., prompt formatting, platform-specific fields) into a clean utility module.

‚∏ª

üß± Modular Architecture
	‚Ä¢	Unify all generators (single, bulk, and scheduled bulk) into a modular contentGenerator system that:
	‚Ä¢	Accepts config (niche, template type, tone, etc.)
	‚Ä¢	Returns fully formatted content payload including: script, productDescription, demoScript, instagramCaption, tiktokCaption, youtubeCaption, xCaption
	‚Ä¢	Use a single shared method for:
	‚Ä¢	Tone handling
	‚Ä¢	Content template logic
	‚Ä¢	PromptFactory generation

‚∏ª

üóÇ Project Structure Enhancements
	‚Ä¢	Move prompt logic into a clean promptFactory.ts file with each template type in its own exported function.
	‚Ä¢	Create a new scheduler.ts module that handles:
	‚Ä¢	Creating and managing scheduled jobs (every 5 min, daily at 5am, etc.)
	‚Ä¢	Viewing and editing scheduled jobs from the UI
	‚Ä¢	Create a webhookDispatcher.ts that routes outgoing payloads to the correct Make.com webhook by niche.

‚∏ª

‚öô Unified Generator UX Update
	‚Ä¢	Add a dropdown toggle inside the automated bulk generator:
	‚Ä¢	Allows scheduling a bulk job at a chosen time
	‚Ä¢	Opens a nested modal with:
	‚Ä¢	Template type
	‚Ä¢	Tone
	‚Ä¢	Platform selection
	‚Ä¢	Product list preview
	‚Ä¢	Scheduling time (cron format or daily/weekly option)
	‚Ä¢	Add a sidebar section üóì Scheduled Jobs that:
	‚Ä¢	Lists all scheduled automated bulk jobs
	‚Ä¢	Allows toggling, deleting, or rescheduling

‚∏ª

üßπ Additional Cleanup & Efficiency Boosts
	‚Ä¢	Remove any unused variables, console logs, or temp files
	‚Ä¢	Ensure all data is typed with interfaces or types (TypeScript)
	‚Ä¢	Standardize naming conventions across the app (camelCase for vars, PascalCase for components)
	‚Ä¢	Ensure ContentHistory page includes:
	‚Ä¢	New Spartan format outputs
	‚Ä¢	Any scheduled bulk output
	‚Ä¢	Proper tags or labels for how/when content was generated

‚∏ª

üß™ Final QA Instructions
	‚Ä¢	After refactor, run the following end-to-end test:
	‚Ä¢	Generate content using both single and bulk generator
	‚Ä¢	Schedule a bulk generator run for 5 mins later and verify it fires
	‚Ä¢	Confirm generated content shows up correctly in Content History
	‚Ä¢	Trigger sync to Google Sheets and verify webhook was sent

‚∏ª

Let me know when this is complete, and show me the diffs for key files: contentGenerator.ts, scheduler.ts, promptFactory.ts, and contentHistory.tsx.

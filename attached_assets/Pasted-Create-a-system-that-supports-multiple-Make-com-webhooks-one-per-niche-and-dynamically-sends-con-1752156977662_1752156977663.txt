Create a system that supports multiple Make.com webhooks â€” one per niche â€” and dynamically sends content generation payloads to the correct webhook based on the selected niche.

**Features:**
1. Add a field in the backend config to store the webhook URL for each niche:
```js
const webhookMap = {
  "beauty": "https://hook.us2.make.com/abc123",        // Beauty & Personal Care
  "fitness": "https://hook.us2.make.com/def456",       // Fitness & Wellness
  "technology": "https://hook.us2.make.com/ghi789",    // Technology & Gadgets
  "fashion": "https://hook.us2.make.com/jkl012",       // Fashion & Style
  "food": "https://hook.us2.make.com/mno345",          // Food & Nutrition
  "travel": "https://hook.us2.make.com/pqr678",        // Travel & Adventure
  "pets": "https://hook.us2.make.com/stu901"           // Pet Care & Supplies
};
Modify the content dispatch logic to:

Read the niche from the content generation payload

Look up the corresponding webhook URL

Send a POST request with the JSON body to the correct Make.com webhook

Update the Webhook Settings UI to show all 7 webhook URL input fields (one for each niche), labeled clearly:

html
Copy
Edit
<label>Beauty & Personal Care</label>
<input type="text" name="webhook_beauty" />
<label>Fitness & Wellness</label>
<input type="text" name="webhook_fitness" />
...
Save all 7 URLs into your backend config or database.

When Enable Webhook is toggled ON:

Validate all webhook fields

Enable the routing logic using the niche field from the payload

Bonus: Add a button to "Test Webhook" per niche. This sends a dummy payload to verify it's working.

ðŸ§ª Example Payload Routing Logic (Node.js/Express style)
js
Copy
Edit
app.post("/send-to-make", async (req, res) => {
  const { niche, ...payload } = req.body;

  const webhookUrl = webhookMap[niche?.toLowerCase()];
  if (!webhookUrl) return res.status(400).json({ error: "No webhook for this niche" });

  try {
    await fetch(webhookUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });
    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ error: "Webhook failed", details: err.message });
  }
});
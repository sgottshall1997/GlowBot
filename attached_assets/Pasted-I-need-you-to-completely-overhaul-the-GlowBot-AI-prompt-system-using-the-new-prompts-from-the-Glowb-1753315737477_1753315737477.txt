I need you to completely overhaul the GlowBot AI prompt system using the new prompts from the "Glowbot Prompts Modified.pdf" document that I've attached. Here's what needs to be done:

**CRITICAL REQUIREMENTS:**
1. Replace ALL existing prompts in the system with the new prompts from the PDF
2. Ensure the UI includes selection options for EVERY SINGLE prompt from the document
3. Make this integration seamless - no existing functionality should break
4. Update all relevant files including templates, prompt factory, and UI components

**FILES THAT NEED COMPLETE OVERHAUL:**

1. **server/services/promptFactory.ts** - Replace all template prompt functions with new prompts from PDF
2. **server/prompts/templates.ts** - Update the template loading system 
3. **server/prompts/templates/universal/*.txt** - Replace all universal template files
4. **server/prompts/templates/[niche]/*.txt** - Replace all niche-specific template files
5. **shared/templateMetadata.ts** - Update template metadata to match new prompts
6. **client/src/components/TemplateSelector.tsx** - Ensure UI shows all new prompt options
7. **shared/constants.ts** - Update template types to match new prompts

**SPECIFIC ACTIONS NEEDED:**

1. **Parse the PDF document** and extract all the new prompts with their exact names and content
2. **Map each new prompt** to the appropriate template type and niche
3. **Replace the TEMPLATE_PROMPTS object** in promptFactory.ts with functions that use the new prompts
4. **Update all .txt files** in the templates directory with the new prompt content
5. **Update TEMPLATE_METADATA** to reflect the new prompt names, descriptions, and categories
6. **Ensure the TemplateSelector component** displays all new prompts with proper categorization
7. **Test that both manual and scheduled generation** work with the new prompts
8. **Verify that Spartan format** and all other existing features still work with new prompts

**INTEGRATION REQUIREMENTS:**
- Maintain backward compatibility where possible
- Ensure all existing parameters (tone, niche, contentFormat, etc.) still work
- Keep the same API structure for generation endpoints
- Preserve all existing UI functionality while adding new prompt options
- Make sure both bulk generation and individual generation use the new prompts

**QUALITY ASSURANCE:**
- Every prompt from the PDF must be available in the UI
- All prompts must work with the existing content generation pipeline
- Spartan format enforcement must work with all new prompts
- Smart style recommendations must integrate with new prompts
- Webhook integration must continue working

Please analyze the attached PDF document thoroughly and implement this complete prompt system overhaul. Make sure to show me exactly which prompts you're adding and how they map to the existing system structure.
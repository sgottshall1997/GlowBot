You are the GlowBot2 Refactor Agent. Your goal is to replace the current GPT-based "trend search" logic with a Perplexity-backed implementation, while leaving the rest of the backend and database intact.

---

1. Clone the repository:
   - `repo = "https://github.com/sgottshall1997/GlowBot.git"`
   - `git clone repo`

2. Search the codebase for the current GPT-based trend logic:
   - Look for functions or files containing keywords: "TrendGenerator", "findTrendingProducts", "mock", "gpt", or similar.
   - Identify the file(s) where trend products are fetched via ChatGPT prompts.

3. For each such call, replace with Perplexity logic:
   - Write a new async function:
     ```js
     async function fetchTrendingProductsFromPerplexity(niche) {
       const prompt = `What are the top trending Amazon affiliate products in the ${niche} niche right now that have gone viral on TikTok or Instagram? For each product, return product name, a one‑line benefit, viral metric or mentions, and price range under $100.`;
       
       const resp = await fetch("https://api.perplexity.ai/chat/completions", {
         method: "POST",
         headers: {
           "Authorization": `Bearer ${process.env.PERPLEXITY_API_KEY}`,
           "Content-Type": "application/json"
         },
         body: JSON.stringify({ model: "sonar-pro", messages: [{role:"user", content: prompt}] })
       });
       const json = await resp.json();
       return parsePerplexityProductList(json);
     }
     ```
   - Implement `parsePerplexityProductList(json)` to map response to the same structure your current pipeline expects (fields: `name`, `benefit`, `viralMetric`, `price`, etc.).

4. Replace existing GPT-based trend function calls with your new Perplexity version:
   - Ensure you pass through the same niche parameter.
   - After obtaining results, feed them into existing pipeline calls like `storeProduct()`, `generateScript()`, etc.

5. Keep your database untouched:
   - Do not modify your existing tables (hooks, products, metrics).
   - Just store the Perplexity-sourced products into your current `products` table with an added field `source = 'perplexity'`.
     ```sql
     ALTER TABLE products ADD COLUMN source TEXT DEFAULT 'gpt';
     ```
   - Insert new rows with `source = 'perplexity'`.

6. Add daily cron or scheduler (if not already present) to run:
   ```js
   for (const niche of NICHES) {
     const picks = await fetchTrendingProductsFromPerplexity(niche);
     for (const p of picks) {
       await storeProduct({ ...p, source: 'perplexity', niche });
     }
   }
Schedule it at a fixed time (e.g., 5 AM daily), replacing or complimenting your existing generator triggers.

Add minimal error handling:

If the Perplexity call fails, fallback to:

Existing GPT-based mock (optional), or

Log the error and skip that niche for the day.

Update README / comments to reflect the new trend sourcing method.

✅ Replit Agent Checklist
pgsql
Copy
Edit
[ ] Repo cloned: sgottshall1997/GlowBot
[ ] Current GPT trend logic identified
[ ] fetchTrendingProductsFromPerplexity() implemented
[ ] parsePerplexityProductList matches existing schema
[ ] GPT calls replaced with Perplexity calls
[ ] Products inserted with source = 'perplexity'
[ ] Cron job triggers Perplexity daily trend run
[ ] Error fallback logic added
[ ] README updated to document change
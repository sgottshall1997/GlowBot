CONSTRAINTS
- ADDITIVE ONLY. Do not refactor/rename/delete non-CookAIng code.
- Server under /api/cookaing-marketing/** ; Client under /src/cookaing-marketing/**
- Drizzle migrations: non-destructive only (Phase 1 tables already created).
- Must run fully in MOCK mode with empty .env; switch to 'live' only if keys present.
- Respect feature flags: ENABLE_COMPETITOR_ANALYSIS, ENABLE_SENTIMENT, ENABLE_VIRAL_PREDICT, ENABLE_FATIGUE_DETECT.
- Integrate with existing Reports, Dashboard KPIs, analytics_events, and Health page.

GOAL (PHASE 3)
Ship Advanced Analytics & Intelligence E2E:
1) Competitor Content Analysis (ingest, index, compare)
2) Sentiment Analysis (per artifact/version and per campaign/brand snapshot)
3) Viral Prediction Scoring (learned features, score persistence, suggestions)
4) Content Fatigue Detection (topic/segment decay over time)
Surfacing in:
- Intelligence page (tabs for each feature)
- Marketing Dashboard KPI row + drill-ins
- Reports (new sections and filters)
- Suggestions surfaced near generator/campaigns

==============================================================================
A) PROVIDERS (LIVE + MOCK)  — /src/cookaing-marketing/services/providers/*
==============================================================================
- competitor.provider.ts
  live: use SERPAPI_KEY or public RSS endpoints (if configured)
  mock: deterministic fixtures (3–5 posts/platform with metrics_json)
- sentiment.provider.ts
  live: PERSPECTIVE_API_KEY or HF; outputs {score, magnitude, labels}
  mock: polarity by keywords (e.g., “fast”, “free”, “love” → positive)
- viral.provider.ts
  live: shallow model: logistic/regression over features (OR/CTR, length, hooks)
  mock: seeded score 0–100 from content hash
- fatigue.provider.ts
  live/mock: rolling trend on topic × time (slope via least squares)
All return {mode:'live'|'mock'} and never throw on missing keys.

==============================================================================
B) SERVICES (ORCHESTRATION) — /src/cookaing-marketing/services/*
==============================================================================
- intelligence.service.ts
  • scanCompetitors({platforms[], keywords[]}) → competitor_posts[]
  • takeSentimentSnapshot({scope:'campaign'|'brand'|'post', refId?}) → sentiment_snapshots
  • scoreViral({versionId}) → viral_scores with features_json (len, hashtags, hook type, past engagement)
  • computeFatigue({segmentId?, topic}) → fatigue_signals (slope, last_seen_at)
  • deriveSuggestions({campaignId?}) → recommendations JSON (reuse hooks, shorten scripts, timing)
- features.service.ts
  • extractFeaturesFromVersion(versionId) → features_json (tokens, length, hook class, past perf from analytics_events)

Write analytics_events entries for each operation: type ∈ {competitor_scan, sentiment_snapshot, viral_score, fatigue_compute} with detail JSON.

==============================================================================
C) API ROUTES (FINAL) — mount under /api/cookaing-marketing
==============================================================================
POST /intel/competitors/scan
  {platforms?:string[], keywords?:string[], lookbackDays?:number=14}
  → {posts:[...], mode}

GET  /intel/competitors
  {platform?, q?, from?, to?, limit?, offset?}
  → paginated competitor_posts

POST /intel/sentiment/snapshot
  {scope:'campaign'|'brand'|'post', refId?:string}
  → {snapshot, mode}

GET  /intel/sentiment
  {scope?, refId?, from?, to?, limit?}
  → list sentiment_snapshots

POST /intel/viral/score
  {versionId:string}
  → {score, features, mode}

GET  /intel/viral
  {versionId?, campaignId?, from?, to?, limit?}
  → list viral_scores

POST /intel/fatigue/compute
  {segmentId?:string, topic:string, windowDays?:number=30}
  → {signal:{topic, slope, last_seen_at}, mode}

GET  /intel/fatigue
  {segmentId?, topic?, from?, to?, limit?}
  → list fatigue_signals

GET  /intel/suggestions
  {campaignId?}
  → recommendations JSON (hooks to reuse, optimal length, timing hints)

==============================================================================
D) CLIENT UI
==============================================================================
1) Intelligence Page — /src/cookaing-marketing/pages/intelligence/Intelligence.tsx
   Tabs:
   - Competitors
     * Controls: platforms, keywords, lookback → Run Scan
     * Table: source, author, snippet, metrics (likes/comments/shares), link
     * “Send to Ideas” → create draft campaign artifact (social/blog)
   - Sentiment
     * Snapshot card (scope selector: brand/campaign/post)
     * Trend chart (last 30–90 days), label chips
   - Viral Predictor
     * Select content_version (from History/Generator)
     * Show features + score, “Apply Suggestions” → prefill generator A/B pack
   - Fatigue
     * Topic input, window; Trend line with slope badge
   Each tab: toast states, skeletons, “mode: mock/live” badge.

2) Dashboard Enhancements — /cookaing-marketing (existing)
   - “Intelligence KPIs” row (last 14d):
     * Avg Sentiment, Viral Avg, Competitor Posts Scanned, Topics with Negative Slope
   - Cards deep-link to Intelligence tabs.

3) Reports — /cookaing-marketing/reports (existing)
   - New sections/filters:
     * Sentiment by campaign/channel over time
     * Viral score distribution by channel
     * Fatigue topics (descending by negative slope)
     * Competitor leaderboard (by engagement)

4) Generator & Campaign UX hooks
   - Generator Preview: “Get Viral Suggestions” (calls /intel/suggestions and shows hook/length variants)
   - Campaign Detail: “Sentiment snapshot for this campaign”
   - Campaign editor: “See competitor ideas” side drawer → import post as inspiration block (metadata only)

==============================================================================
E) HEALTH + DOCS
==============================================================================
- Extend GET /api/cookaing-marketing/integrations/health with: competitors, sentiment, viral, fatigue
  Status: 'ok' live keys; 'mock_mode' when keys missing; 'error' if exception.

- Docs (/cookaing-marketing/docs):
  Section “Intelligence”
   • What each module does
   • Setup keys (SERPAPI_KEY, PERSPECTIVE_API_KEY/HF, etc.)
   • Mock behavior and limitations
   • How suggestions flow into generator/A-B

==============================================================================
F) SEEDS
==============================================================================
- competitor_posts: ~12 posts across 3 platforms with metrics_json
- sentiment_snapshots: brand and 2 campaigns over 6 timestamps
- viral_scores: 6 versions with features_json and scores
- fatigue_signals: 3 topics (one with negative slope)
- Wire a demo content_version and campaign to demonstrate suggestions

==============================================================================
G) TESTS
==============================================================================
Vitest:
- Providers return deterministic mocks without keys
- intelligence.service: features extraction stable; viral score persisted; fatigue slope correct
- Routes serialize shapes; analytics_events rows appended

Playwright (mock mode):
- Intelligence → Competitors: run scan → table populates → import to draft campaign
- Sentiment: take snapshot (brand, campaign) → trend updates
- Viral: select version → score displayed → apply suggestions → generator prefilled
- Fatigue: compute on topic → negative slope badge shows
- Dashboard KPIs reflect seeded/mock data; Reports show new sections

==============================================================================
H) ACCEPTANCE
==============================================================================
- Intelligence page fully functional in mock mode; health shows 4 adapters
- Dashboard/Reports render new analytics
- Generator/Campaign hooks surface suggestions/snapshots
- Seeds present; docs updated; tests pass; no regressions

FINAL TEST (Phase 3):
Open /cookaing-marketing/pages/intelligence in mock mode → run Competitor Scan (table populates) and import a post as a draft artifact → take Sentiment Snapshot for one campaign and for brand (trend visible) → score Viral on a seeded content version and apply suggestions back into the generator → compute Fatigue for a topic and see a negative slope badge → confirm Dashboard shows Intelligence KPIs and Reports include Sentiment/Viral/Fatigue/Competitor sections → run Vitest + Playwright suites; Health shows competitors/sentiment/viral/fatigue as mock_mode; zero console/server errors.
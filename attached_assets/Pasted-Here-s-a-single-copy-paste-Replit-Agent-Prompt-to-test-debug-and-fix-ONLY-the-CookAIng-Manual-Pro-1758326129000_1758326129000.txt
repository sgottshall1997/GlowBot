Here’s a single, copy-paste Replit Agent Prompt to test, debug, and fix ONLY the CookAIng Manual Promo Generator. It enforces Spartan format parity with GlowBot and strict input→output fidelity. If tests fail, the agent must fix code and re-run until green.

⸻

Replit Agent Prompt (paste this exactly):

You are senior engineer + QA for CookAIng. Run a full test→debug→fix cycle for the Manual Promo Generator only (no bulk, no jobs). Validate Spartan format parity with GlowBot and input→output fidelity. If any test fails, fix the implementation/templates/renderer, extend tests to cover the bug, and re-run until all pass.

Scope (Manual Generator only)
	•	Code under /apps/cookaing/features/PromoGenerator/ (UI: PromoGeneratorUI.tsx, hook usePromoGenerator.ts)
	•	API endpoint: /apps/cookaing/server/api/promo/generate.post.ts
	•	Generator package: /packages/cookaing-promo/ (schemas.ts, templateRegistry.ts, promptFactory.ts, renderers/*, utils/utm.ts, utils/normalize.ts)
	•	Content history (reuse if exists): /packages/content-history/
	•	Do not modify GlowBot code; only read it to mirror Spartan structure.

Test & Fix Tasks

Create or update the tests below. When failures occur, print root cause → patch code → add test → rerun. Repeat until green.

1) Unit Tests — Schemas, Registry, Prompt Factory

Files:
	•	/packages/cookaing-promo/tests/schemas.test.ts
	•	/packages/cookaing-promo/tests/registry.test.ts
	•	/packages/cookaing-promo/tests/promptFactory.test.ts

Assertions:
	•	Schema round-trip: PromoInput parses, generatePromo() returns an array of valid PromoOutput.
	•	Objective×Channel coverage: Every supported objective × channel in templateRegistry renders without throw.
	•	Input→Output fidelity:
	•	appName === "CookAIng", objective & channel echoed.
	•	metadata.persona === audiencePersona; metadata.tone === input.tone (or explicit default).
	•	featuresUsed ⊆ features and not empty when features provided.
	•	benefitsUsed ⊆ keyBenefits and not empty when provided.
	•	If proofPoints provided → proofPointsUsed mirrors it (allow omission if none).
	•	cta.url === ctaUrl; cta.utmUrl composed correctly (see UTM tests).
	•	wordCount for email/blog respects wordCountHint ±15%.
	•	Variants: If Manual UI requests A/B → at least two variants with labels included in utm_content (<channel>-<objective>-A|B).
	•	Channel rules:
	•	Reels: first line is a hook; 20–40s heuristic (line/char window); end-card CTA present.
	•	X thread: 6–10 tweets; last tweet CTA.
	•	LinkedIn: value-first, ends with question CTA.
	•	Email: subject 5–7 words; preview 35–50 chars; one primary CTA.
	•	Blog: H1, intro, H2/H3s, bullets, conclusion, CTA.
	•	Ads: 10 headlines, 4 descriptions, 3 long primaries; Google includes keyword buckets.

2) Unit Tests — Spartan Renderer Parity

Files:
	•	/packages/cookaing-promo/tests/spartanRenderer.test.ts
	•	/packages/cookaing-promo/tests/__snapshots__/spartanRenderer.snap (generate deterministic fixtures)

Assertions:
	•	Exact field order/headings/labels match GlowBot’s Spartan style (derive structure by reading GlowBot output; do not import GlowBot code).
	•	Minimal prose; terse headings; stable ordering.

3) Unit Tests — UTM & Normalizers

Files:
	•	/packages/cookaing-promo/tests/utm.test.ts
	•	/packages/cookaing-promo/tests/normalize.test.ts

Assertions:
	•	UTM builder appends params to clean URLs and merges correctly with existing query/fragment.
	•	utm_content === "<channel>-<objective>-<variantLabel>" when variants exist.
	•	Normalizers trim, dedupe arrays, and keep meaningful order.

4) Integration Tests — API + Content History (Manual only)

Files:
	•	/apps/cookaing/tests/api.manual.promo.test.ts
	•	/packages/content-history/tests/history.integration.test.ts

Assertions:
	•	POST /promo/generate: returns valid PromoOutput[] for selected channels; when save=true, entries persist and deepEqual (ignoring id/timestamp) vs API response.
	•	History saveEntry/queryEntries/getById round-trip for all fields (variants, utm).

5) UI E2E (Manual Generator only) — Playwright or RTL+MSW

Files:
	•	/apps/cookaing/e2e/promo.manual.e2e.test.ts

Flow:
	•	Open Marketing → Promo Generator.
	•	Fill Persona, Offer, Benefits, Features, Proof, Tone, CTA URL, Campaign/Source/Medium, WordCountHint; pick Objective + multi-Channel; toggle A/B; Generate.
	•	Assert Spartan tabs render per channel; Copy buttons work.
	•	If Save to History is present, click it → verify history entry equals UI content (normalized deepEqual).

Edge Cases (add tests, then fix code)
	•	Optional fields empty/whitespace.
	•	Very small/large wordCountHint.
	•	Non-ASCII/emoji in inputs.
	•	CTA URLs with existing UTMs or #anchors.
	•	Missing template for an objective×channel → clear error and add template.
	•	LLM/generation errors: surface actionable error; ensure retry at UI/API level returns clean message.

Commands & DX
	•	Ensure scripts exist (create if missing):
	•	"test:cookaing-promo", "test:history", "test:e2e"
	•	Run full suite:
	•	pnpm test:cookaing-promo && pnpm test:history && pnpm test:e2e
	•	Run lint/typecheck on changed files; fix violations.
	•	Guarantee filenames match feature names; fix imports.

Debug & Fix Loop (must do)
	1.	Run all tests.
	2.	On any failure: print the root cause, propose the minimal fix, implement it.
	3.	Add/extend tests to prevent regression.
	4.	Re-run the full suite until all green.

Acceptance Criteria
	•	100% pass across unit, integration, and manual E2E tests listed above.
	•	Spartan parity verified via snapshots and structural assertions (document mirrored fields/order/labels).
	•	Input→Output fidelity verified for persona/tone/features/benefits/proof, objective/channel, CTA/UTM, variants, and word count rules.
	•	API can generate multi-channel outputs and (optionally) save to history with exact match.
	•	No changes to Bulk/Jobs codepaths; they remain untouched.

Deliverables (return these)
	1.	Summary of initial failures and the fixes applied.
	2.	Final test run summary and changed files list.
	3.	A short QA checklist (Manual flow only) and notes for future hardening.
You're a senior full-stack engineer helping build a smart redirect link system for affiliate tracking inside a Node.js + Express app using SQLite for storage. Implement the following:

üîÅ Goal:
Create short redirect links (e.g., /redirect/:id) that:
- Redirect to the full affiliate URL
- Log each click with metadata like platform, niche, timestamp, referrer, user-agent
- Cache click info in SQLite
- Auto-create new links with a helper function

üß© Tasks:

1. Create a SQLite database (`redirects.sqlite`) with two tables:
   ‚Ä¢ `redirect_links` with columns:
     - `id` (TEXT, PRIMARY KEY)
     - `originalUrl` (TEXT)
     - `platform` (TEXT)
     - `niche` (TEXT)
     - `createdAt` (TEXT)

   ‚Ä¢ `redirect_clicks` with columns:
     - `id` (INTEGER, PRIMARY KEY AUTOINCREMENT)
     - `redirectId` (TEXT)
     - `timestamp` (TEXT)
     - `platform` (TEXT)
     - `niche` (TEXT)
     - `userAgent` (TEXT)
     - `referrer` (TEXT)

2. In `utils/db.ts`, export these async functions:
   ‚Ä¢ `initDB()` ‚Äì initializes DB and creates tables
   ‚Ä¢ `createRedirectLink({ id, originalUrl, platform, niche })`
   ‚Ä¢ `getRedirectLink(id)`
   ‚Ä¢ `recordClick({ redirectId, timestamp, platform, niche, userAgent, referrer })`

3. In `routes/redirect.ts`, export a router with:
   GET `/redirect/:id`
   - Looks up `id` in `redirect_links`
   - Records click in `redirect_clicks` using metadata from query + headers
   - Redirects to original URL

4. In `server.ts` or main app file:
   - Call `initDB()` on startup
   - Mount router at `/redirect`
   - Log that server is running

5. Provide example usage:
   ‚Ä¢ Call `createRedirectLink()` for an ID like `glow123`
   ‚Ä¢ Share a link like: `/redirect/glow123?platform=instagram&niche=skincare`

üí° Notes:
- Use `express`, `sqlite3`, `sqlite` (promise wrapper)
- All database functions must be async
- You can assume the Express app is TypeScript and uses modular routes

Generate the complete TypeScript code in logical files: `utils/db.ts`, `routes/redirect.ts`, and `server.ts`
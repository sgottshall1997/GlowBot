CONSTRAINTS
- ADDITIVE ONLY; do not refactor or delete non-CookaIng code.
- Backend: /api/cookaing-marketing/** ; Frontend: /src/cookaing-marketing/**
- Must run entirely in MOCK mode with empty .env, and switch to 'live' automatically when provider keys exist.
- Maintain zero regressions to GlowBot or existing CookAIng features.
- Provide one-click runners for smoke, e2e, and load tests.

GOAL (PHASE 6)
Deliver a complete test + observability layer that validates end-to-end flows across CookAIng:
(1) E2E UI tests (Playwright) covering CookAIng Mode navigation and all feature pillars (Content, Enhancements, Intelligence, Social, Personalization, Collaboration, Calendar, Integrations, Messaging, AI Lab, Compliance, History & Ratings, Reports, Health, Docs).
(2) Integration + unit tests (Vitest) with deterministic mocks for all providers.
(3) Self-test/health endpoints + seed/reset tooling for repeatable test runs.
(4) Observability: structured logs, optional error & performance hooks, admin tools for inspecting queues/jobs.
(5) Performance & accessibility checks (lightweight).
(6) CI scripts and coverage gates.

================================================================
A) TEST DATA CONTROL & SELF-TEST ENDPOINTS
================================================================
1) Admin/Test routes (server):
   - POST /api/cookaing-marketing/admin/seed
     body: {preset:'minimal'|'full'|'reset'} → idempotent seeds for all Phase 1–5 tables (versions, enhancements, jobs, artifacts, competitors, sentiment, viral, fatigue, social_queue, hashtags, optimal_times, brand_voice_profiles, approvals, roles, calendar, ecommerce_products, messaging_sequences, moderation/plagiarism reports, ratings).
   - POST /api/cookaing-marketing/admin/reset-mocks
     → clears mock queues/states; re-seed minimal set.
   - GET  /api/cookaing-marketing/self-test
     → runs quick server-side checks (DB connectivity, required tables, provider mock reachability, feature flag resolution) and returns a summary JSON.

2) Seed fixtures:
   - /src/cookaing-marketing/fixtures/** with JSON for each domain; one “full-stack” fixture connecting a sample campaign across channels, with A/B, ratings, and analytics_events.

================================================================
B) PROVIDER TEST HARNESS & DETERMINISTIC MOCKS
================================================================
3) Test harness for providers:
   - /src/cookaing-marketing/testing/providerMocks.ts
     Export seeded deterministic mocks for every provider introduced in Phases 1–5 (image/video/tts/rewrite, competitors, sentiment, viral, fatigue, social, hashtags, timing, personalization, brandVoice, multimodal, realtimeOpt, moderation, plagiarism, crm, ecommerce, messaging).
   - Ensure all providers return { mode:'mock'|'live' } and stable outputs for the same inputs.

================================================================
C) VITEST (UNIT + INTEGRATION)
================================================================
4) Add Vitest suites under /src/cookaing-marketing/__tests__:
   - services/*.service.spec.ts: happy path + error path, ensure DB rows written, analytics_events appended.
   - routes/*.api.spec.ts: request/response shapes; RBAC guard tests for approvals/portal; health statuses (mock mode).
   - personalization & voice: token-safe substitution; pantry-aware rendering; brand voice application idempotence.
   - ratings/history: version increment per scope; winner toggle atomicity; reuse-suggestions sort by quality_score with recency decay.
   - social: queue state transitions; hashtag/timing deterministic results.
   - intelligence: feature extraction; viral scoring; fatigue slope computation.
   - calendar: move item; ICS export validity.
   - enhancement: attach-to-campaign creates artifacts; media assets persisted.
   - coverage thresholds: branches>=70, lines>=80 (configurable).

Add script entries:
  "test": "vitest run --coverage",
  "test:watch": "vitest --watch"

================================================================
D) PLAYWRIGHT (E2E UI)
================================================================
5) E2E specs under /e2e/cookaing/**:
   - 00_mode-and-routing.spec.ts: CookAIng mode switcher, layout, password gate (if enabled).
   - 01_dashboard-and-health.spec.ts: KPI row renders; integrations/health chips show 'mock_mode'; links drill-in.
   - 02_generator-and-enhance.spec.ts: generate preview → run Rewrite/TTS/Image/Video → attach to campaign → verify artifact presence.
   - 03_intelligence.spec.ts: competitor scan; sentiment snapshot; viral score; fatigue compute; import post to draft.
   - 04_social.spec.ts: queue publish; run engagement action; hashtag suggestions; optimal times heatmap.
   - 05_personalization-and-voice.spec.ts: audience rules preview+apply; learn voice; apply voice; preview as contact; create A/B variants.
   - 06_collab-approvals-portal.spec.ts: create role; submit & approve; open client portal read-only view.
   - 07_calendar.spec.ts: create, move, and export ICS.
   - 08_history-and-ratings.spec.ts: Save & Rate; AI evaluation; mark winner; clone to campaign; sync ratings (mock CSV).
   - 09_reports.spec.ts: performance, ROAS, sentiment/viral/fatigue breakdowns.
   - 10_docs-and-about.spec.ts: About + Docs pages, footers present.

Playwright config:
  - Use a test user identity via header `x-user-email` to exercise RBAC paths.
  - Run with empty .env to enforce mock mode.

Add scripts:
  "e2e": "playwright test e2e/cookaing --reporter=line",
  "e2e:ui": "playwright test e2e/cookaing --ui"

================================================================
E) OBSERVABILITY & ADMIN TOOLS
================================================================
6) Logging:
   - Add a tiny logger wrapper /src/cookaing-marketing/utils/logger.ts using console JSON (or pino if already present).
   - Log at INFO for user actions, DEBUG for provider calls (toggle via ENV DEBUG_COOKAING=true).
   - Include correlationId on requests for tracing.

7) Error/Performance hooks (optional, no-op if keys missing):
   - Sentry (or placeholder) init under /src/cookaing-marketing/obs/sentry.ts (reads SENTRY_DSN; noop if absent).
   - Web vitals on key pages (LCP/CLS/TTI) collected to a lightweight endpoint POST /api/cookaing-marketing/obs/vitals (store in analytics_events type='web_vitals').

8) Admin panels:
   - /cookaing-marketing/devtools: add “Seed Full Fixture”, “Reset Mocks”, and “Run Self-Test” buttons; display results JSON.

================================================================
F) PERFORMANCE & ACCESSIBILITY
================================================================
9) Performance (lightweight):
   - Add npm script "perf:api" using autocannon against top endpoints (reports, social/queue, content/generate preview).
   - Store summaries under /perf-reports with timestamped filenames.

10) Accessibility:
   - Integrate axe-core in Playwright on key pages (Dashboard, Generator, Intelligence, Social, Personalization, Collaboration, History).
   - Fail test on serious violations; print report link in artifacts.

================================================================
G) CI & DEV EXPERIENCE
================================================================
11) CI scripts (package.json):
   - "ci": "pnpm -s build && pnpm -s test && pnpm -s e2e"
   - Ensure Playwright installs browsers on CI step; cache node_modules.

12) CHANGELOG & Docs:
   - /src/cookaing-marketing/CHANGELOG.md: summarize Phase 6 additions.
   - /cookaing-marketing/docs: “Testing & Observability” section with:
     * How to run seeds, self-test, vitest, playwright, perf:api
     * Mock vs live mode behavior matrix
     * Health endpoints reference
     * Troubleshooting (common failures, where to check logs)

================================================================
H) HEALTH PAGE EXTENSION
================================================================
13) Extend GET /api/cookaing-marketing/integrations/health:
   - Add group “testing”: { seeds:'ok', selfTest:'ok|error', e2eFixtures:'ok' }
   - Include summary of recent test runs (timestamps from analytics_events)

================================================================
I) ACCEPTANCE
================================================================
- Self-test returns 'ok' statuses for DB, seeds, providers (mock), and flags.
- Vitest + Playwright suites pass in mock mode; coverage meets thresholds.
- Devtools can seed/reset and run self-test; logs/tracing visible.
- Health page shows new “testing” group and accurate statuses.
- Perf and a11y checks produce reports without hard failures.
- No regressions to existing features or routes; all new work is additive.
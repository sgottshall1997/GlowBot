You are working in a React + Vite + Express + PostgreSQL + Drizzle monorepo.

GOAL
Add the following GlowBot-equivalent capabilities to the CookAIng module, reusing GlowBot architecture patterns “exactly” where feasible, but ADDITIVE-ONLY and SCOPED to CookAIng:
1) Content Enhancement (AI image/video generation, voiceover TTS, rewriting/spinning)
2) Advanced Analytics & Intelligence (competitor content, sentiment, viral prediction, fatigue detection)
3) Social Media Automation (direct publishing, automated engagement, hashtag research, optimal timing)
4) Advanced Personalization (dynamic adaptation, deep audience segmentation, brand-voice learning)
5) Collaboration & Workflow (multi-user roles, approvals, client portal, visual calendar)
6) Advanced Integrations (CRM, e-commerce, advanced email automations, SMS/WhatsApp)
7) AI Enhancements (custom model fine-tuning placeholders, multimodal prompts, real-time optimization loop)
8) Compliance & Safety (moderation, brand safety guardrails, plagiarism checks)

SCOPE / GUARDRAILS
- ADDITIVE ONLY: do not refactor, rename, or delete existing non-CookAIng modules.
- Server endpoints under: /api/cookaing-marketing/**
- Client pages/components under: /src/cookaing-marketing/**
- Drizzle migrations: non-destructive only.
- Must run in MOCK mode (no external keys). Provide provider adapters with key detection.
- Respect existing feature flags and add new flags for each group.

ENV VARS (append to .env.example; all optional; use MOCK mode if missing)
# AI & Media
OPENAI_API_KEY=
ANTHROPIC_API_KEY=
STABILITY_API_KEY=
ELEVENLABS_API_KEY=
FFMPEG_ENABLED=true

# Social APIs
META_APP_ID=        # Graph API for IG/FB publish
META_APP_SECRET=
META_PAGE_ID=
TIKTOK_BUSINESS_API_KEY=
X_BEARER_TOKEN=
YOUTUBE_API_KEY=

# Analytics & External
SERPAPI_KEY=        # competitor research
HUGGINGFACE_API_KEY=
GOOGLE_SERVICE_ACCOUNT_JSON=
GOOGLE_SHEETS_ID_RATINGS=
MAKE_WEBHOOK_URL=

# E-commerce & CRM
SHOPIFY_STORE_URL=
SHOPIFY_ADMIN_TOKEN=
WOOCOMMERCE_URL=
WOOCOMMERCE_KEY=
HUBSPOT_API_KEY=
ZOHO_API_KEY=

# Messaging
TWILIO_SID=
TWILIO_TOKEN=
TWILIO_WHATSAPP_FROM=
SMS_FROM_NUMBER=

# Compliance
PERSPECTIVE_API_KEY=
COPYSCAPE_API_KEY=  # or any plagiarism checker key

# Feature Flags
ENABLE_IMAGE_GEN=true
ENABLE_VIDEO_GEN=true
ENABLE_TTS=true
ENABLE_REWRITE=true
ENABLE_COMPETITOR_ANALYSIS=true
ENABLE_SENTIMENT=true
ENABLE_VIRAL_PREDICT=true
ENABLE_FATIGUE_DETECT=true
ENABLE_SOCIAL_PUBLISH=true
ENABLE_SOCIAL_ENGAGE=true
ENABLE_HASHTAG_RESEARCH=true
ENABLE_OPTIMAL_TIMING=true
ENABLE_DYNAMIC_ADAPT=true
ENABLE_BRAND_VOICE_LEARN=true
ENABLE_COLLAB=true
ENABLE_CLIENT_PORTAL=true
ENABLE_CALENDAR=true
ENABLE_CRM_INTEGRATIONS=true
ENABLE_ECOMMERCE=true
ENABLE_ADV_EMAIL_AUTOMATION=true
ENABLE_SMS_WHATSAPP=true
ENABLE_CUSTOM_MODEL_PLACEHOLDERS=true
ENABLE_MULTIMODAL_PROMPTS=true
ENABLE_REALTIME_OPT=true
ENABLE_MODERATION=true
ENABLE_BRAND_SAFETY=true
ENABLE_PLAGIARISM=true

=====================================================================
A) DATABASE (Drizzle migrations; non-destructive)
=====================================================================
1) media_assets (id, type 'image'|'video'|'audio', status, source 'gen'|'upload', url, thumb_url, metadata_json, created_at)
2) content_enhancements (id, version_id fk→content_versions, enhancement 'rewrite'|'spin'|'tts'|'image'|'video', inputs_json, outputs_json, provider, status, created_at)
3) competitor_posts (id, source_platform, author, url, captured_at, metrics_json, text, tags[])
4) sentiment_snapshots (id, scope 'campaign'|'post'|'brand', ref_id, score float, magnitude float, labels_json, created_at)
5) viral_scores (id, content_version_id fk, features_json, score float, model, created_at)
6) fatigue_signals (id, segment_id fk?, topic, slope float, last_seen_at, created_at)
7) social_queue (id, platform, account_id, scheduled_at, payload_json, status, result_json, created_at)
8) hashtag_suggestions (id, topic, platform, tags[], metrics_json, created_at)
9) optimal_times (id, platform, segment_id?, times_json, created_at)
10) brand_voice_profiles (id, name, corpus_json, embedding_vector, created_at)
11) approvals (id, entity_type 'campaign'|'artifact'|'version', entity_id, status 'draft'|'review'|'approved'|'rejected', assignee, notes, created_at)
12) collaboration_roles (id, user_id/email, role 'admin'|'editor'|'viewer'|'client', scopes_json, created_at)
13) content_calendar (id, title, start_at, end_at, channel, ref_id, status, created_at)
14) ecommerce_products (id, source 'shopify'|'woocommerce', external_id, title, price, url, image, inventory_json, tags[])
15) messaging_sequences (id, channel 'email'|'sms'|'whatsapp', name, steps_json, triggers_json, status, created_at)
16) moderation_reports (id, version_id fk, checks_json, decisions_json, status, created_at)
17) plagiarism_reports (id, version_id fk, score float, matches_json, created_at)
(Add helpful indexes for lookups and scheduling)

=====================================================================
B) SERVER — PROVIDERS & SERVICES (adapters with MOCK mode)
=====================================================================
Create /src/cookaing-marketing/services/providers/*
- imageGen.provider.ts  (OpenAI/Stable Diffusion; MOCK returns placeholder URLs + prompts)
- videoGen.provider.ts  (template-driven FFMPEG stub; MOCK returns storyboard + “render queued”)
- tts.provider.ts        (ElevenLabs or WebSpeech; MOCK returns data:audio URL)
- rewrite.provider.ts    (OpenAI/Claude; MOCK returns rule-based rephrases)
- sentiment.provider.ts  (HF/Perspective; MOCK returns fixed polarity by keywords)
- competitor.provider.ts (SERP/API scraping; MOCK consumes RSS/public endpoints or fixtures)
- hashtag.provider.ts    (stats heuristics; MOCK generates tags by ingredients + popularity map)
- timing.provider.ts     (optimal posting heuristics; MOCK by user timezone & engagement)
- moderation.provider.ts (Perspective-style categories; MOCK keyword blacklist)
- plagiarism.provider.ts (Copyscape-like; MOCK similarity via cosine over embeddings if available; else token overlap)
- crm.provider.ts        (HubSpot/Zoho; MOCK creates local contact link)
- ecommerce.provider.ts  (Shopify/Woo; MOCK seeds product list)
- messaging.provider.ts  (Twilio SMS/WhatsApp; MOCK logs outbound payload)

Services (/src/cookaing-marketing/services/*):
- media.service.ts        (persist media_assets, link to versions)
- enhancement.service.ts  (run rewrite/spin/tts/image/video on a content_version, store in content_enhancements)
- intelligence.service.ts (competitor crawl, sentiment snapshot, viral predictor [logistic/regression on features], fatigue detector)
- social.service.ts       (queue + publish to IG/FB/TikTok/X/YouTube with retry & rate limits; mock when keys absent)
- personalization.service.ts (dynamic content rules by segment/demographic/geo; hooks to generator)
- brandVoice.service.ts   (ingest corpus, compute embeddings, style extraction; mock pattern templates)
- collab.service.ts       (approvals workflow, role checks)
- calendar.service.ts     (CRUD content_calendar, ICS export)
- integrations.service.ts (CRM/e-com sync jobs)
- automation.service.ts   (advanced email/sms/whatsapp sequences)
- moderation.service.ts   (run moderation + plagiarism; return decisions + block flags)
- realtimeOpt.service.ts  (closed-loop optimization: pull performance → propose changes)

=====================================================================
C) SERVER — API ROUTES (all under /api/cookaing-marketing)
=====================================================================
Content Enhancement
- POST /enhance/rewrite           {versionId, style, constraints} → new enhancement + outputs; link to version
- POST /enhance/tts               {versionId, voice, pace} → audio asset (media_assets)
- POST /enhance/image             {versionId, prompt, count} → image assets
- POST /enhance/video             {versionId, templateId, assets[]} → video job queued (mock ok)
- GET  /enhance/list?versionId=   → list enhancements

Advanced Analytics & Intelligence
- POST /intel/competitors/scan    {platforms[], keywords[]} → writes competitor_posts
- GET  /intel/competitors         {filters} → list competitor_posts
- POST /intel/sentiment/snapshot  {scope, refId} → sentiment_snapshots
- POST /intel/viral/score         {versionId} → viral_scores
- POST /intel/fatigue/compute     {segmentId?, topic} → fatigue_signals

Social Automation
- POST /social/publish            {platform, accountId, payload, scheduledAt?} → social_queue
- POST /social/engage             {platform, action, targets[]} → mock engagement actions
- GET  /social/hashtags           {topic, platform} → hashtag_suggestions
- GET  /social/optimal-times      {platform, segmentId?} → optimal_times

Personalization & Voice
- POST /personalize/dynamic       {versionId, audienceRules} → adapted payload in enhancements
- POST /voice/learn               {profileName, corpus} → brand_voice_profiles
- GET  /voice/profiles            → list profiles

Collaboration & Workflow
- POST /collab/roles              {user, role, scopes}
- GET  /collab/roles              → list
- POST /approvals/submit          {entityType, entityId, assignee}
- POST /approvals/decision        {approvalId, status, notes}
- GET  /calendar                  {from,to} → content_calendar
- POST /calendar                  {title,startAt,endAt,channel,refId}

Integrations
- POST /integrations/crm/sync     {provider, payload} → link contact/lead
- POST /integrations/ecom/sync    {provider} → import products
- POST /messaging/sequence/run    {sequenceId, targets[]} → queue sends
- POST /email/automation/upsert   {sequenceDef} → persist in messaging_sequences

AI Ops
- POST /ai/custom/prepare         {datasetRef} → placeholder (no actual fine-tune)
- POST /ai/multimodal/prompt      {text, images?, audio?} → mock merged output
- POST /ai/realtime/optimize      {versionId or campaignId} → suggestions JSON

Compliance
- POST /compliance/moderate       {versionId} → moderation_reports
- POST /compliance/plagiarism     {versionId} → plagiarism_reports

Health & Admin
- GET  /integrations/health → extend with “imageGen, videoGen, tts, rewrite, competitors, sentiment, viral, fatigue, socialPublish, socialEngage, hashtags, optimalTimes, dynamicContent, brandVoice, collab, calendar, crm, ecommerce, smsWhatsApp, customModel, multimodal, realtimeOpt, moderation, plagiarism”

=====================================================================
D) CLIENT — PAGES & COMPONENTS (CookAIng Mode sidebar)
=====================================================================
Add pages (shadcn/ui, skeletons, toasts, mock-friendly):
- /cookaing-marketing/content (existing generator) → add new “Enhance” tab with actions: Rewrite, TTS, Image, Video.
- /cookaing-marketing/intelligence
  * Tabs: Competitors, Sentiment, Viral Predictor, Fatigue
- /cookaing-marketing/social-automation
  * Tabs: Publish (queue), Engagement, Hashtags, Optimal Times
- /cookaing-marketing/personalization
  * Add Dynamic Adaptation panel (audience rules builder) + Brand Voice profiles (upload corpus, preview style)
- /cookaing-marketing/collaboration
  * Roles table, Approvals board (Kanban), Activity log
- /cookaing-marketing/calendar
  * Drag-and-drop content calendar; link to campaigns/artifacts; ICS export
- /cookaing-marketing/integrations
  * CRM syncs (HubSpot/Zoho), E-com syncs (Shopify/Woo) with mock status and “Import Now”
- /cookaing-marketing/messaging
  * Advanced automations: Email + SMS/WhatsApp sequences (visual builder)
- /cookaing-marketing/ai-lab
  * Custom Model (placeholder), Multimodal prompt lab, Real-time Optimization runner
- /cookaing-marketing/compliance
  * Moderation & Plagiarism reports with “Block from Publish” toggle

Components:
- EnhancementsPanel (runs rewrite/tts/image/video against a selected content_version)
- CompetitorTable, SentimentCard, ViralScoreCard, FatigueTrendChart
- SocialQueueTable, EngagementRunner, HashtagSuggester, OptimalTimesHeatmap
- AudienceRuleBuilder, BrandVoiceTrainer (upload, analyze, preview)
- RolesManager, ApprovalsBoard
- CalendarBoard (drag/snap, color by channel)
- CRMSync, EcomSync, MessagingSequenceBuilder
- MultimodalPromptPlayground, RealtimeOptimizationPanel
- ModerationReportCard, PlagiarismReportCard

InstructionFooter:
- Add detailed “What/Setup/Use” footer to each new page with env keys, mock mode notes, and cross-links.

=====================================================================
E) INTEGRATION POINTS (tie-ins with existing CookAIng)
=====================================================================
- Unified Content Generator: add “Enhance” actions; save outputs to content_enhancements and media_assets; allow “Attach to Campaign”.
- Campaign detail: show Enhancements tab per artifact; allow “Use Enhanced Version”.
- Reports: add Intelligence KPIs (viral avg, sentiment trend), Social Automation metrics (queued/published), and Quality Score overlays.
- A/B Testing: allow “seed variants from Rewriter/Brand Voice” and feed rating system with AI + user scores.
- Health page: include all new adapters with status chips; mock OK states when keys missing.

=====================================================================
F) TESTS (Vitest + Playwright; mock mode)
=====================================================================
Vitest:
- Providers return deterministic mocks when keys missing; switch to live only when present.
- Services persist records correctly; referential links consistent (versions ↔ enhancements ↔ media).
- Intelligence models compute scores and persist (viral_scores, sentiment_snapshots, fatigue_signals).
- Social queue state machine: draft→queued→published (mock).
- Personalization transformations preserve schema and tokens.
- Moderation/plagiarism produce block flags and reports.

Playwright:
- INTELLIGENCE: run competitor scan mock → table populates; sentiment snapshot → card updates; viral score on a version → card shows score.
- SOCIAL: queue a post for IG mock, see status; generate hashtags; view optimal times heatmap.
- ENHANCE: from a content_version, run Rewrite and TTS; preview audio; add Image gen; attach enhanced artifact to a campaign.
- PERSONALIZATION: create dynamic rule → preview adapted content; train a Brand Voice profile → preview rewritten hook.
- COLLAB: assign role; submit approval; approve and see publish controls unlock.
- CALENDAR: drag a campaign to a new date; ICS export downloads.
- INTEGRATIONS: run CRM sync mock; import e-com products mock; build a messaging sequence and run to mock queue.
- AI LAB: run multimodal prompt (text+image stub) → get merged output; run realtime optimization on a campaign → suggestions shown.
- COMPLIANCE: moderate a version (mock flags) and block publishing; run plagiarism mock and view similarity.

=====================================================================
G) ACCEPTANCE
=====================================================================
- All new pages exist in CookAIng Mode and function in MOCK mode with empty .env.
- Health dashboard displays all new adapters with accurate status.
- Enhancements, Intelligence, Social, Personalization, Collab, Calendar, Integrations, AI Lab, Compliance all interoperate with existing generator, campaigns, A/B, ratings, and reports.
- No regressions to existing CookAIng/GlowBot features; feature flags gate visibility.
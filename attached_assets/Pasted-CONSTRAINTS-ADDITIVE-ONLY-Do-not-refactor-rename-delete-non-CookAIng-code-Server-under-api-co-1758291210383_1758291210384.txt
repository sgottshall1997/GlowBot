CONSTRAINTS
- ADDITIVE ONLY. Do not refactor/rename/delete non-CookAIng code.
- Server under /api/cookaing-marketing/** ; Client under /src/cookaing-marketing/**
- Drizzle migrations: non-destructive (Phase 1 tables for brand_voice_profiles, collaboration_roles, approvals, content_calendar already exist).
- Must run fully in MOCK mode with empty .env; switch to 'live' only when keys present.
- Respect feature flags: ENABLE_DYNAMIC_ADAPT, ENABLE_BRAND_VOICE_LEARN, ENABLE_COLLAB, ENABLE_CLIENT_PORTAL, ENABLE_CALENDAR.
- Integrate with Unified Content Generator, Campaigns, Reports, Dashboard, Health.

GOAL (PHASE 5)
Ship two E2E pillars:
A) Advanced Personalization
   1) Dynamic content adaptation by audience rules (segment/diet/skill/geo/time)
   2) Brand Voice learning (corpus ingestion, style profile extraction, live/mocked)
   3) One-click application of voice + audience rules to any content_version
   4) Generator hooks: “Preview as Contact/Segment,” “Apply Brand Voice,” “Create Variants”
B) Collaboration & Workflow
   1) Role-based access control (RBAC) gates for key routes/actions
   2) Approvals lifecycle (draft → review → approved/rejected) on artifacts/versions
   3) Client Portal views (read-only, branded, white-label toggle) per-organization
   4) Visual Content Calendar (drag/drop, link to artifacts/campaigns, ICS export)

==============================================================================
A) DATA & STORAGE
==============================================================================
Use existing Phase 1 tables; add small fields/indexes as needed (non-destructive):

1) brand_voice_profiles
   - ensure fields: name, corpus_json, embedding_vector (nullable), created_at
   - add index on (name)

2) collaboration_roles
   - ensure fields: user (email or id), role ('admin'|'editor'|'viewer'|'client'), scopes_json
   - add index on (user)

3) approvals
   - ensure fields: entity_type ('campaign'|'artifact'|'version'), entity_id, status ('draft'|'review'|'approved'|'rejected'), assignee, notes, created_at
   - add index on (entity_type, entity_id), (status)

4) content_calendar
   - ensure fields: title, start_at, end_at, channel, ref_id, status
   - add index on (start_at), (channel)

5) content_versions (optional enhancements)
   - add nullable brand_voice_profile_id
   - add nullable audience_rules_json (the dynamic adaptation rules applied)
   - add index on (brand_voice_profile_id)

Create/update Drizzle migrations accordingly (no destructive changes).

==============================================================================
B) PROVIDERS & SERVICES
==============================================================================
Providers (/src/cookaing-marketing/services/providers/*):
- brandVoice.provider.ts
  live: derive style summary + few-shot prompts from corpus; store embedding if available
  mock: deterministic style profile (tone, cadence, lexicon) based on corpus tokens
- personalization.provider.ts
  live: transform payload using rules + voice (OpenAI/Claude if keys)
  mock: rule-based substitutions (diet swaps, time constraints, vocabulary tweaks)

Services (/src/cookaing-marketing/services/*):
- brandVoice.service.ts
  • ingestCorpus({name, corpusText|docs[]}) → profile (style descriptors, example phrases, embedding?)
  • listProfiles(), getProfile(profileId)
  • applyVoice({versionId, profileId}) → returns adapted payload + creates content_enhancements row with enhancement='voice_adapt'
- personalization.service.ts
  • buildAudienceRulesUI schema (diet, skill, time, geo, device, language)
  • adaptForAudience({versionId, audienceRules}) → adapted payload + content_enhancements row enhancement='dynamic_adapt'
  • previewAsContact({versionId, contactId}) → inject pantry/diet/skill into copy (uses existing personalization renderers)
- rbac.service.ts
  • can(user, action, entity) using collaboration_roles.scopes_json (actions: read/write/approve/publish/export)
- approvals.service.ts
  • submitForReview(entityType, entityId, assignee)
  • decide(approvalId, status, notes)
  • getStatus(entityType, entityId)
- calendar.service.ts (finalize)
  • listTimeline({from,to}), upsertItem({title,start,end,channel,refId,status}), moveItem({id,newStart,newEnd})
  • icsExport({from,to}) → text/vcs

All services must log analytics_events (type ∈ {brand_voice_learn, audience_adapt, approval_submit, approval_decide, calendar_upsert, calendar_move}).

==============================================================================
C) API ROUTES (FINAL)
==============================================================================
Mount under /api/cookaing-marketing:

PERSONALIZATION & VOICE
POST /personalize/rules/preview
  {versionId, audienceRules} → {previewPayload, mode}

POST /personalize/rules/apply
  {versionId, audienceRules, persist?:true} → creates enhancement + returns adapted payload

POST /voice/learn
  {profileName, corpusText?, files?} → {profileId, summary, examplePhrases, mode}

GET  /voice/profiles
  → [{id,name,createdAt,summary}]

POST /voice/apply
  {versionId, profileId, persist?:true} → enhancement 'voice_adapt' + adapted payload

PREVIEW AS CONTACT
POST /personalize/preview-as-contact
  {versionId, contactId} → rendered tokens + pantry-aware swaps (uses existing renderers)

COLLABORATION & APPROVALS (RBAC enforced)
GET  /collab/roles
POST /collab/roles
  {user, role, scopes} → creates/updates role assignment

POST /approvals/submit
  {entityType, entityId, assignee} → approval row (status='review')

POST /approvals/decision
  {approvalId, status:'approved'|'rejected', notes?} → update status

GET  /approvals/status
  {entityType, entityId} → {status, assignee, updatedAt}

CLIENT PORTAL (read-only)
GET  /portal/overview
  {orgId} → summary: campaigns, artifacts, schedule, latest results (BLEACHED of internal fields)
GET  /portal/artifacts
  {orgId, from?, to?} → list limited artifact metadata
GET  /portal/reports
  {orgId, range} → trimmed Reports DTO

CALENDAR
GET  /calendar
  {from,to} → items
POST /calendar
  {title,startAt,endAt,channel,refId,status}
POST /calendar/move
  {id,newStart,newEnd}
GET  /calendar/ics
  {from,to} → text/vcs (download)

==============================================================================
D) CLIENT UI
==============================================================================
1) Personalization Page — /cookaing-marketing/personalization
   - Tabs: Audience Rules, Brand Voice
   - Audience Rules:
     * Builder form (diet/skill/time/geo/language)
     * “Preview Rule on Selection” (select content_version) → calls /personalize/rules/preview
     * “Apply to Version” → persist enhancement + show diff viewer (before/after)
     * “Preview as Contact” selector
   - Brand Voice:
     * Upload/textarea corpus → “Learn Voice” → profile card (tone, cadence, lexicon, example phrases)
     * Profiles table with “Apply to Version” action
   - Mode badge (mock/live), toasts, skeletons

2) Generator hooks — /cookaing-marketing/content
   - In Preview pane:
     * “Preview as Contact” dropdown
     * “Apply Audience Rules” button (opens builder)
     * “Apply Brand Voice” dropdown (profiles)
     * “Create Variants (A/B)” → generates variant pack from rules + voice (writes to ab_tests/variant payloads)

3) Campaign Detail
   - “Approvals” panel (status chip, submit/decision actions per RBAC)
   - “Personalization Preview” drawer (pick contact/segment; render)
   - “Brand Voice” badge if artifact/version has profile applied

4) Collaboration Page — /cookaing-marketing/collaboration
   - Roles tab: table of collaboration_roles; add/edit role; test “can()” inline
   - Approvals tab: Kanban (Draft/Review/Approved/Rejected), filter by entity type; click card to decide
   - Activity log (recent approval events)

5) Client Portal (public-ish) — /cookaing-marketing/portal
   - Read-only dashboards for selected org (respect feature flag)
   - Views: Overview, Artifacts, Reports (subset)
   - Branding toggle: use org logo/color if present
   - Routing guard: restrict to role 'client' or a shared token (mock)

6) Calendar Page — /cookaing-marketing/calendar
   - Finalize drag/drop (move items → /calendar/move)
   - Create item modal (link to campaign/artifact)
   - ICS export button
   - Color by channel; tooltips

7) UX polish
   - InstructionFooter on each page with What/Setup/Use, env keys, mock notes
   - Role-guarded buttons greyed out with tooltip “Insufficient permissions”

==============================================================================
E) RBAC INTEGRATION
==============================================================================
- Add a lightweight server middleware: /src/cookaing-marketing/middleware/rbac.ts
  * Reads collaboration_roles by user identity (mock via header 'x-user-email' if no auth)
  * Exposes req.rbac.can(action, entity)
- Gate sensitive routes: approvals submit/decision, portal data, role management, calendar write

==============================================================================
F) HEALTH + DOCS
==============================================================================
- Extend /integrations/health with: dynamicContent (personalization), brandVoice, collab, calendar, clientPortal
  Status: 'ok' live; 'mock_mode' when keys missing or using mock identity

- Update /cookaing-marketing/docs:
  Sections “Advanced Personalization” and “Collaboration & Workflow”
  * Include RBAC matrix (actions per role)
  * Voice learning steps (mock/live), audience rules examples
  * Approvals flow diagram, Client Portal scope, Calendar usage & ICS

==============================================================================
G) SEEDS
==============================================================================
- brand_voice_profiles: 2 demo profiles (e.g., “Chef Warm & Practical”, “High-Energy Short-Form”)
- content_versions: add versions tagged with each profile + audience rules
- approvals: a few items in Review/Approved across campaigns/artifacts
- collaboration_roles: admin/editor/viewer/client roles for demo users
- content_calendar: 6 mock items across next 2 weeks (email/social/blog/push)

==============================================================================
H) TESTS
==============================================================================
Vitest:
- brandVoice.service: corpus → profile deterministic in mock; applyVoice returns adapted payload; sets brand_voice_profile_id
- personalization.service: rules preview/apply produce token-safe, pantry-aware copy; previewAsContact respects diet/skill
- rbac.service: can() resolves actions per role; route guards deny when insufficient
- approvals.service: submit/decision updates status atomically; analytics_events appended
- calendar.service: moveItem updates times; icsExport returns a valid VCALENDAR

Playwright (mock mode):
- Personalization page: build rules → preview → apply → see diff; learn voice → apply profile; preview as contact
- Generator: “Preview as Contact”, “Apply Audience Rules”, “Apply Brand Voice”, “Create Variants (A/B)” flows
- Collaboration page: add role; approvals board move card → status updates; activity log visible
- Campaign detail: approvals panel submit→approve; personalization drawer renders for a selected contact
- Client Portal: loads read-only views for org (mock token/role)
- Calendar: drag item to new date; export ICS and download file

==============================================================================
I) ACCEPTANCE
==============================================================================
- Advanced Personalization (rules + brand voice) fully functional (mock/live), integrated with generator and campaigns; enhancements persisted.
- Collaboration & Workflow (RBAC, approvals, client portal, calendar) fully functional in mock mode with UI guards.
- Health shows new adapters; Docs updated; Seeds present; Tests pass; no regressions.